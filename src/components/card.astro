---
import Layout from "../layouts/layout.astro";
import Card from "../components/Card.astro";
import "../styles/cards.css";
import { createClient } from "@sanity/client";

// ---------- Sanity client ----------
const sanity = createClient({
  projectId: "x01v56io",
  dataset: "production",
  apiVersion: "2025-01-01",
  useCdn: !import.meta.env.SANITY_READ_TOKEN,   // fast for public datasets
  token: import.meta.env.SANITY_READ_TOKEN || undefined,
});

// ---------- GROQ query ----------
// Works with either:
// 1) Your "term" type (title, slug, related[]->{title})
// 2) Any "glossary*" types with common fields
const query = /* groq */ `
  *[
    _type == "term" ||
    _type in ["glossaryEntry","glossary"] ||
    _type match "glossary*"
  ]{
    // names
    "term": coalesce(term, title, name),
    "slug": coalesce(slug.current, slug),
    // text
    "definition": coalesce(
      string(definition),
      pt::text(definition),
      pt::text(body),
      description,
      desc
    ),
    // image (any common field name)
    "image": coalesce(
      mainImage.asset->url,
      image.asset->url,
      hero.asset->url,
      coverImage.asset->url
    ),
    // aka + related
    "akaRaw": coalesce(aka, alsoKnownAs),
    "related": coalesce(related[]->{ "term": coalesce(term, title, name) }, [])
  } | order(term asc)
`;

// ---------- Fetch + normalize ----------
type Entry = {
  term: string;
  definition: string;
  image?: string | null;
  tags?: string[];
  aka?: string[];
  related?: string[];
  _letter?: string;
};

let entries: Entry[] = [];
try {
  const raw = await sanity.fetch(query);
  entries = (Array.isArray(raw) ? raw : [])
    .map((e: any) => {
      const term = String(e?.term || "").trim();
      const definition = String(e?.definition || "").trim();
      const aka =
        Array.isArray(e?.akaRaw)
          ? e.akaRaw.filter(Boolean).map(String)
          : e?.akaRaw ? [String(e.akaRaw)] : [];
      const related =
        Array.isArray(e?.related)
          ? e.related.map((r: any) => String(r?.term || "")).filter(Boolean)
          : [];

      return {
        term,
        definition,
        image: e?.image || null,
        aka,
        related,
        _letter: term.charAt(0).toUpperCase(),
      } as Entry;
    })
    .filter((e) => e.term && e.definition)
    .sort((a, b) => a.term.localeCompare(b.term));
} catch (err) {
  entries = [];
}

// ---------- View model ----------
const ALPHA = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i));
const pageTitle = "Glossary";
const pageDescription = "Plain-language definitions for machine knitting terms.";
---

<style>
/* ===== Layout ===== */
.glossary-layout { display:grid; grid-template-columns: 72px 1fr; gap:1rem; }
@media (max-width: 768px){ .glossary-layout{ grid-template-columns:1fr; } .alpha-rail{ display:none; } }

/* ===== Alpha Buttons (large/touch) ===== */
.alpha-rail{ position:sticky; top:96px; align-self:start; display:grid; grid-auto-rows:minmax(44px,auto); gap:8px; }
.alpha-btn{
  display:inline-flex; align-items:center; justify-content:center;
  width:56px; height:44px; border-radius:12px; font-size:16px; font-weight:700;
  text-decoration:none; border:1px solid #e6e6e6; color:#52682D; background:#F3F6EF;
  transition: transform .06s ease, box-shadow .12s ease, background .2s ease;
}
.alpha-btn:hover{ transform: translateY(-1px); box-shadow:0 2px 6px rgba(0,0,0,.08); }
.alpha-btn[aria-disabled="true"]{ color:#9aa0a6; background:#fafafa; pointer-events:none; border-color:#eee; }

/* ===== Search ===== */
.search-wrap{ margin-bottom:1rem; display:flex; gap:.5rem; align-items:center; }
.search-input{ width:100%; border:1px solid #e6e6e6; border-radius:12px; padding:12px 14px; font-size:16px; }

/* ===== Card Grid (1/2/3 cols) ===== */
.cards-grid{ display:grid; grid-template-columns:1fr; gap:16px; }
@media (min-width:640px){ .cards-grid{ grid-template-columns: repeat(2,1fr); } }
@media (min-width:1024px){ .cards-grid{ grid-template-columns: repeat(3,1fr); } }

/* ===== Flip Effect ===== */
.kbm-flip{ perspective:1200px; }
.kbm-flip__inner{ position:relative; transform-style:preserve-3d; transition:transform .5s ease; min-height:260px; width:100%; }
.kbm-flip.is-flipped .kbm-flip__inner{ transform: rotateY(180deg); }
.kbm-flip__face{ position:absolute; inset:0; width:100%; height:100%; backface-visibility:hidden; -webkit-backface-visibility:hidden; overflow:hidden; }
.kbm-flip__back{ transform: rotateY(180deg); }
.kbm-flip__img{ width:100%; height:200px; object-fit:cover; border-radius:12px; margin-bottom:.75rem; }
.kbm-card-title{ font-size:1.1rem; margin:0 0 .5rem 0; color:#52682D; }
.actions{ display:flex; gap:.5rem; margin-top:.75rem; }
.btn{ border:1px solid #e6e6e6; background:#fff; border-radius:10px; padding:8px 12px; font-size:14px; cursor:pointer; }
.btn:hover{ background:#F8F9F8; }
.btn--primary{ background:#52682D; color:#fff; border-color:#52682D; }
.btn--primary:hover{ background:#6E8B3D; border-color:#6E8B3D; }

.empty{ padding:1rem 1.5rem; border:1px solid #e6e6e6; border-radius:16px; background:#fff; }
.see-also{ margin-top:.75rem; font-size:.95rem; color:#444; }
.see-also a{ color:#52682D; text-decoration:none; }
.see-also a:hover{ text-decoration:underline; }
</style>

<Layout>
  <section style="padding-top: 140px; padding-bottom: 80px;">
    <header style="text-align:center; margin-bottom:1.25rem;">
      <h1>{pageTitle}</h1>
      <p style="color:#555;">{pageDescription}</p>
    </header>

    {entries.length === 0 ? (
      <div class="empty">
        <p>No glossary entries found.</p>
        <p style="margin-top:.5rem;">
          Ensure your Sanity docs are <strong>Published</strong> in project <code>x01v56io</code>, dataset <code>production</code>.
        </p>
      </div>
    ) : (
      <div class="glossary-layout">
        <!-- A–Z rail -->
        <aside class="alpha-rail" id="alpha-rail">
          {ALPHA.map((L) => {
            const has = entries.some((e) => e._letter === L);
            return has
              ? <a href={`#${L}`} data-letter={L} class="alpha-btn">{L}</a>
              : <span class="alpha-btn" aria-disabled="true">{L}</span>;
          })}
        </aside>

        <!-- Search + Cards -->
        <div>
          <div class="search-wrap">
            <input id="gsearch" class="search-input" type="search" placeholder="Search terms, AKA, or definition…" />
          </div>

          <div id="cards" class="cards-grid">
            {entries.map((e) => {
              const id = e.term.toLowerCase().replace(/\s+/g, "-");
              const L = e._letter!;
              return (
                <Card
                  class="kbm-card"
                  id={id}
                  data-letter={L}
                  data-term={e.term.toLowerCase()}
                  data-aka={(e.aka||[]).join("|").toLowerCase()}
                >
                  <div id={L} style="position:relative; top:-96px;"></div>

                  <div class="kbm-flip" data-flip>
                    <div class="kbm-flip__inner">
                      <!-- FRONT -->
                      <div class="kbm-flip__face">
                        <h3 class="kbm-card-title">{e.term}</h3>
                        {e.aka?.length ? <p class="kbm-card-tag" style="margin-bottom:.5rem;">Also known as: {e.aka.join(", ")}</p> : null}
                        <p>{e.definition}</p>
                        <div class="actions">
                          <button class="btn btn--primary" data-action="flip" type="button">Details</button>
                        </div>
                      </div>

                      <!-- BACK -->
                      <div class="kbm-flip__face kbm-flip__back">
                        {e.image && <img class="kbm-flip__img" src={e.image} alt="" loading="lazy" />}
                        <h3 class="kbm-card-title">{e.term}</h3>
                        <p>{e.definition}</p>

                        {e.related?.length ? (
                          <div class="see-also">
                            <strong>See also:</strong>
                            {" "}
                            {e.related.map((rt, i) => {
                              const rid = rt.toLowerCase().replace(/\s+/g, "-");
                              return (
                                <>
                                  <a href={`#${rid}`}>{rt}</a>{i < e.related!.length - 1 ? ", " : ""}
                                </>
                              );
                            })}
                          </div>
                        ) : null}

                        <div class="actions">
                          <button class="btn" data-action="flip" type="button">Back</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </Card>
              );
            })}
          </div>

          <div id="empty" class="empty" style="display:none; margin-top:1rem;">
            No terms match your search.
          </div>
        </div>
      </div>
    )}
  </section>
</Layout>

<script>
(function () {
  const input = document.getElementById('gsearch');
  const grid = document.getElementById('cards');
  const cards = grid ? Array.from(grid.querySelectorAll('[data-term]')) : [];
  const empty = document.getElementById('empty');
  const rail = document.getElementById('alpha-rail');
  const alphaBtns = rail ? Array.from(rail.querySelectorAll('[data-letter], .alpha-btn')) : [];

  const norm = (s) => (s || '').normalize('NFKD').toLowerCase();

  function setFlipHeight(flipEl) {
    const inner = flipEl.querySelector('.kbm-flip__inner');
    const front = flipEl.querySelector('.kbm-flip__face:not(.kbm-flip__back)');
    const back  = flipEl.querySelector('.kbm-flip__back');
    if (!inner || !front || !back) return;
    const wasFlipped = flipEl.classList.contains('is-flipped');
    if (wasFlipped) flipEl.classList.remove('is-flipped');
    front.style.position = 'static';
    back.style.position = 'static';
    const h = Math.max(front.scrollHeight, back.scrollHeight);
    front.style.position = '';
    back.style.position = '';
    inner.style.minHeight = h + 'px';
    if (wasFlipped) flipEl.classList.add('is-flipped');
  }
  function resizeAll() { document.querySelectorAll('[data-flip]').forEach(setFlipHeight); }

  function updateAlphaButtons(visibleCards) {
    const visibleLetters = new Set(visibleCards.map(c => c.getAttribute('data-letter')));
    alphaBtns.forEach(btn => {
      const L = btn.getAttribute('data-letter');
      if (!L) return;
      const active = visibleLetters.has(L);
      if (active) { btn.setAttribute('aria-disabled', 'false'); btn.setAttribute('href', '#' + L); }
      else { btn.setAttribute('aria-disabled', 'true'); btn.removeAttribute('href'); }
    });
  }

  function applyFilter() {
    const q = norm(input?.value);
    let visible = [];
    for (const card of cards) {
      const term = card.getAttribute('data-term') || '';
      const aka = card.getAttribute('data-aka') || '';
      const show = !q || term.includes(q) || aka.includes(q);
      card.style.display = show ? '' : 'none';
      if (show) visible.push(card);
    }
    if (empty) empty.style.display = visible.length ? 'none' : '';
    updateAlphaButtons(visible);
    resizeAll();
  }

  if (grid) {
    grid.addEventListener('click', (e) => {
      const btn = e.target.closest('[data-action="flip"]');
      if (!btn) return;
      const card = btn.closest('[data-term]');
      const flip = card && card.querySelector('[data-flip]');
      if (!flip) return;
      flip.classList.toggle('is-flipped');
      setFlipHeight(flip);
    });
  }

  if (rail) {
    rail.addEventListener('click', (e) => {
      const a = e.target.closest('a[data-letter]');
      if (!a) return;
      if (a.getAttribute('aria-disabled') === 'true') { e.preventDefault(); return; }
      const L = a.getAttribute('data-letter');
      const first = cards.find(c => c.style.display !== 'none' && c.getAttribute('data-letter') === L);
      if (first) { e.preventDefault(); first.scrollIntoView({ behavior: 'smooth', block: 'start' }); }
    });
  }

  input?.addEventListener('input', applyFilter);
  window.addEventListener('resize', resizeAll);

  // Kick it off
  applyFilter();
})();
</script>

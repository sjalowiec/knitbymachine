---
export const prerender = false;

import "../../styles/global.css";
import { sanity } from "../../lib/sanity";
import type { GlossaryTerm } from "../../types/sanity";
import BaseLayout from "../../layouts/BaseLayout.astro";

const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get("q") || "";
const letterFilter = url.searchParams.get("letter") || "";

const groqQuery = `*[_type == "term" && status == "published"]{
  _id,
  _createdAt,
  _updatedAt,
  title,
  "slug": slug.current,
  excerpt,
  "definition": pt::text(definition),
  "image": media.asset->url,
  imageAlt,
  relatedLinks[] {
    label,
    url,
    kind
  },
  aliases,
  "related": related[]->{title, "slug": slug.current}
} | order(title asc)`;

const allTerms: GlossaryTerm[] = await sanity.fetch(groqQuery);
let terms = [...allTerms];

if (searchQuery) {
  const query = searchQuery.toLowerCase();
  terms = terms.filter((term) => {
    const definitionText = term.definition?.toLowerCase() || "";
    const aliasesText = term.aliases?.join(" ").toLowerCase() || "";
    return (
      term.title.toLowerCase().includes(query) ||
      definitionText.includes(query) ||
      term.excerpt?.toLowerCase().includes(query) ||
      aliasesText.includes(query)
    );
  });
}

if (letterFilter) {
  terms = terms.filter((term) =>
    term.title.toLowerCase().startsWith(letterFilter.toLowerCase())
  );
}

const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
const lettersWithTerms = new Set(
  allTerms.map((term) => term.title.charAt(0).toUpperCase())
);

function buildGlossaryUrl(params: { q?: string; letter?: string }): string {
  const urlParams = new URLSearchParams();
  if (params.q) urlParams.set("q", params.q);
  if (params.letter) urlParams.set("letter", params.letter);
  const queryString = urlParams.toString();
  return queryString ? `/glossary?${queryString}` : "/glossary";
}
---

<BaseLayout>

<style>
/* ===== Alphabet Filter ===== */
.alphabet-filter {
  margin-bottom: 2rem;
  padding: 1.5rem;
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
}
.alphabet {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}
.alphabet a {
  padding: 0.5rem 0.875rem;
  background: var(--kbm-bg);
  border: 1px solid var(--ring);
  border-radius: 6px;
  text-decoration: none;
  color: var(--kbm-text);
  font-weight: 500;
  transition: all 0.2s;
  min-width: 44px;
  text-align: center;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}
.alphabet a:hover {
  background: var(--kbm-green);
  color: white;
  border-color: var(--kbm-green);
}
.alphabet a.active {
  background: var(--kbm-green);
  color: white;
  border-color: var(--kbm-green);
}
.alphabet a.disabled {
  background: white;
  color: var(--ring);
  border-color: var(--ring);
  opacity: 0.5;
  cursor: not-allowed;
}
.alphabet a.disabled:hover {
  background: white;
  color: var(--ring);
  border-color: var(--ring);
}

/* ===== Glossary Cards ===== */
:global(.card-grid) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
  gap: 1.25rem;
  padding: 1rem 0 2rem 0;
  justify-items: center;
}
:global(.flip-card) {
  background: transparent;
  width: 100%;
  max-width: 340px;
  perspective: 1000px;
  cursor: pointer;
}
:global(.flip-card-inner) {
  position: relative;
  min-height: 320px;
  border-radius: 16px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
  transition: transform 0.6s;
  transform-style: preserve-3d;
  background: #fff;
  border: 1px solid #eef0ea;
}
:global(.flip-card.flipped .flip-card-inner),
:global(.flip-card:hover .flip-card-inner) {
  transform: rotateY(180deg);
}
:global(.flip-card-front),
:global(.flip-card-back) {
  position: absolute;
  inset: 0;
  backface-visibility: hidden;
  border-radius: 16px;
  overflow: hidden;
}
:global(.flip-card-front) {
  transform: rotateY(0deg);
}
:global(.flip-card-back) {
  transform: rotateY(180deg);
  text-align: center;
}
.card-body {
  display: flex;
  flex-direction: column;
  min-height: 260px;
  padding: 1rem 1.1rem 1.1rem;
}
.card-title {
  font-size: 1.15rem;
  font-weight: 800;
  color: #1f2937;
  margin: 0 0 0.35rem 0;
}
.card-excerpt {
  color: #6b7280;
  font-size: 0.975rem;
  line-height: 1.55;
}
.card-definition {
  color: #374151;
  font-size: 0.95rem;
  line-height: 1.5;
}
.card-hint {
  margin-top: auto;
  padding-top: 1rem;
  font-size: 0.9rem;
  color: #6b7280;
  font-style: italic;
  text-align: center;
  opacity: 0.9;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.4rem;
}
.card-hint i {
  color: var(--kbm-green);
  font-size: 1rem;
  opacity: 0.9;
}
.card-back-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  padding: 1rem 1rem 1.25rem;
  height: 100%;
}

.card-back-image,
.card-back-image-placeholder {
  margin-bottom: 0.75rem;
}
.card-back-image-placeholder {
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f0f4ea;
  color: #50692c;
  font-weight: 800;
  font-size: 3rem;
  width: 100%;
  height: 180px;
  border-radius: 12px;
  border: 1px solid #dcdcdc;
  margin-bottom: 1rem;
}
.card-meta {
  margin-top: 0.5rem;
  text-align: center;
  width: 100%;
}
.card-meta a {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.4rem;
  font-weight: 700;
  color: var(--kbm-green);
  text-decoration: none;
  font-size: 1rem;
  padding: 0.25rem 0;
}
.card-meta a:hover {
  text-decoration: underline;
}

.header-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  flex-wrap: wrap;
  gap: 1rem;
}
.header-search {
  flex: 1;
  max-width: 400px;
  min-width: 280px;
}
.header-search form {
  display: flex;
  gap: 0;
  width: 100%;
}
.description {
  margin-bottom: 1.5rem;
  color: #6b7280;
}
.no-results {
  text-align: center;
  padding: 3rem 1rem;
}
.container {
  padding-top: 120px;
}
</style>

<div class="container">
  <div class="header-row">
    <h1>Machine Knitting Terms Glossary</h1>

    <div class="header-search">
      <form method="get" action="/glossary">
        <input
          type="text"
          name="q"
          placeholder="Search Terms Glossary"
          value={searchQuery}
          class="kbm-search-input"
        />
        <button type="submit" class="kbm-search-btn" aria-label="Search">
          <i class="fa fa-search"></i>
        </button>
        <input type="hidden" name="letter" value={letterFilter} />
      </form>
    </div>
  </div>

  <p class="description">
    Unlock the secrets of machine knitting patterns with this comprehensive glossary.
    It's your key to understanding the abbreviations and terms used in patterns and vintage publications.
  </p>

  <div class="alphabet-filter">
    <div class="alphabet">
      <a
        href={buildGlossaryUrl({ q: searchQuery || undefined })}
        class={!letterFilter ? "active" : ""}
      >
        All
      </a>
      {
        alphabet.map((letter) => {
          const hasTerms = lettersWithTerms.has(letter);
          return (
            <a
              href={buildGlossaryUrl({ q: searchQuery || undefined, letter })}
              class={`${letterFilter === letter ? "active" : ""} ${!hasTerms ? "disabled" : ""}`}
            >
              {letter}
            </a>
          );
        })
      }
    </div>
  </div>

  {
    terms.length > 0 ? (
      <div class="card-grid">
        {terms.map((term) => {
          const imageUrl = term.image || null;
          const definitionText = term.definition || term.excerpt || "No definition available";
          const firstLetter = term.title.charAt(0).toUpperCase();
          const altText = term.imageAlt || term.title;

          return (
            <div class="flip-card" data-card-id={term._id}>
              <div class="flip-card-inner">
                <div class="flip-card-front">
                  <div class="card-body">
                    <h2 class="card-title">{term.title}</h2>
                    {term.excerpt && <p class="card-excerpt">{term.excerpt}</p>}
                    <p class="card-definition">{definitionText}</p>
                    <div class="card-hint">
                      <i class="fa-solid fa-hand-point-right"></i>
                      Hover / tap for details
                    </div>
                  </div>
                </div>

                <div class="flip-card-back">
                  <div class="card-back-content">
                    {imageUrl ? (
                      <img
                        data-gif-src={imageUrl}
                        alt={altText}
                        class="card-back-image"
                        data-term-slug={term.slug}
                        loading="lazy"
                      />
                    ) : (
                      <div
                        class="card-back-image-placeholder"
                        data-term-slug={term.slug}
                      >
                        {firstLetter}
                      </div>
                    )}

                    <div class="card-meta">
                      <a href={`/glossary/${term.slug}`} class="seo-link">
                        <i class="fa-solid fa-hand-point-right" style="margin-left:6px;"></i>
                         View full page
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    ) : (
      <div class="no-results">
        <h2>No terms found</h2>
        <p>Try adjusting your search or filters.</p>
      </div>
    )
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".flip-card");
    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
    let currentlyFlippedCard = null;

    function loadGIF(card) {
      const img = card.querySelector(".card-back-image[data-gif-src]");
      if (!img) return;
      const gifSrc = img.getAttribute("data-gif-src");
      if (!gifSrc) return;

      if (prefersReducedMotion) {
        const staticSrc = gifSrc.includes("?") ? `${gifSrc}&fm=jpg` : `${gifSrc}?fm=jpg`;
        if (!img.src || img.src !== staticSrc) img.src = staticSrc;
        return;
      }
      if (!img.src || img.src !== gifSrc) img.src = gifSrc;
    }

    function unloadGIF(card) {
      const img = card.querySelector(".card-back-image[data-gif-src]");
      if (img) img.removeAttribute("src");
    }

    cards.forEach((card) => {
      const front = card.querySelector(".flip-card-front");
      const back = card.querySelector(".flip-card-back");
      const backImage = back.querySelector(".card-back-image, .card-back-image-placeholder");
      const seoLink = back.querySelector(".seo-link");

      front.addEventListener("click", (e) => {
        e.stopPropagation();
        if (currentlyFlippedCard && currentlyFlippedCard !== card) {
          currentlyFlippedCard.classList.remove("flipped");
          unloadGIF(currentlyFlippedCard);
        }
        card.classList.add("flipped");
        currentlyFlippedCard = card;
        loadGIF(card);
      });

      backImage?.addEventListener("click", (e) => {
        e.stopPropagation();
        const slug = backImage.getAttribute("data-term-slug");
        if (slug) window.location.href = `/glossary/${slug}`;
      });

      seoLink?.addEventListener("click", (e) => e.stopPropagation());

      if (!window.matchMedia("(max-width: 768px)").matches) {
        card.addEventListener("mouseenter", () => {
          if (currentlyFlippedCard && currentlyFlippedCard !== card) {
            currentlyFlippedCard.classList.remove("flipped");
            unloadGIF(currentlyFlippedCard);
          }
          currentlyFlippedCard = card;
          loadGIF(card);
        });
        card.addEventListener("mouseleave", () => {
          unloadGIF(card);
          currentlyFlippedCard = null;
        });
      }
    });
  });
</script>

</BaseLayout>

---
const pageTitle = "Magic Formula by Measurement | Knit by Machine";
const pageDescription = "Calculate shaping with the Magic Formula using measurements. Enter your starting and ending widths and gauge to create clear knitting instructions.";
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{pageTitle}</title>
  <meta name="description" content={pageDescription} />
  <meta name="keywords" content="magic formula, shaping calculator, knitting measurements, increase stitches, decrease stitches, machine knitting tools" />
  
  <!-- Fonts & Icons -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=Shadows+Into+Light+Two&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  
  <style>
    :root {
      --kbm-green: #6E8B3D;
      --kbm-green-dark: #52682d;
      --kbm-bg: #e9ece7;
      --page-bg: #f7f8f7;
      --white: #ffffff;
      --text-dark: #333;
      --border-color: #d0d5cc;
      --font: "Poppins", system-ui, Arial, sans-serif;
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      padding: 20px;
      font-family: var(--font);
      color: var(--text-dark);
      background: var(--page-bg);
      line-height: 1.6;
    }

    .wizard-container {
      max-width: 600px;
      margin: 0 auto;
      background: var(--white);
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }

    h1 {
      color: var(--kbm-green);
      font-size: 1.75rem;
      font-weight: 600;
      margin: 0 0 0.5rem 0;
      text-align: center;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.75rem;
    }

    h1 i {
      font-size: 1.5rem;
    }

    .description {
      text-align: center;
      color: var(--text-dark);
      margin-bottom: 2rem;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    .input-group {
      margin-bottom: 1.25rem;
    }

    input[type="number"],
    select {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      font-family: var(--font);
      font-size: 1rem;
      color: var(--text-dark);
      transition: border-color 0.2s;
    }

    input[type="number"]:focus,
    select:focus {
      outline: none;
      border-color: var(--kbm-green);
    }

    input::placeholder {
      color: #999;
    }

    .toggle-group {
      display: flex;
      gap: 1rem;
      align-items: center;
      justify-content: center;
      margin-bottom: 1.5rem;
    }

    .unit-toggle-wrapper {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.95rem;
      font-weight: 500;
      color: var(--text-dark);
    }

    .unit-label {
      min-width: 25px;
      text-align: center;
    }

    .switch {
      position: relative;
      display: inline-block;
      width: 44px;
      height: 24px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--kbm-green);
      transition: 0.3s;
      border-radius: 24px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.3s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: var(--kbm-green);
    }

    input:checked + .slider:before {
      transform: translateX(20px);
    }

    .sides-group {
      display: flex;
      gap: 0.5rem;
      flex: 1;
    }

    .sides-btn {
      flex: 1;
      padding: 0.75rem;
      border: 1px solid var(--border-color);
      background: var(--white);
      color: var(--text-dark);
      border-radius: 4px;
      cursor: pointer;
      font-family: var(--font);
      font-size: 0.95rem;
      transition: all 0.2s;
    }

    .sides-btn.active {
      background: var(--kbm-green);
      color: var(--white);
      border-color: var(--kbm-green);
    }

    .sides-btn:hover:not(.active) {
      background: var(--kbm-bg);
    }

    .calculate-btn {
      width: 100%;
      padding: 1rem;
      background: var(--kbm-green);
      color: var(--white);
      border: none;
      border-radius: 4px;
      font-family: var(--font);
      font-size: 1.05rem;
      font-weight: 600;
      cursor: pointer;
      margin-top: 1.5rem;
      transition: background 0.2s;
    }

    .calculate-btn:hover {
      background: var(--kbm-green-dark);
    }

    .results {
      display: none;
      margin-top: 2rem;
      padding: 1.5rem;
      background: var(--kbm-bg);
      border-radius: 4px;
      border-left: 4px solid var(--kbm-green);
    }

    .results.show {
      display: block;
    }

    .results h2 {
      color: var(--kbm-green);
      font-size: 1.25rem;
      margin: 0 0 1rem 0;
    }

    .results p {
      margin: 0.5rem 0;
      line-height: 1.6;
    }

    .results strong {
      color: var(--kbm-green-dark);
    }

    .note {
      margin-top: 1rem;
      padding: 1rem;
      background: #fff3cd;
      border-left: 3px solid #ffc107;
      border-radius: 4px;
      font-size: 0.9rem;
    }

    .copy-btn {
      margin-top: 1rem;
      padding: 0.65rem 1.25rem;
      background: var(--white);
      color: var(--kbm-green);
      border: 2px solid var(--kbm-green);
      border-radius: 4px;
      font-family: var(--font);
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
    }

    .copy-btn:hover {
      background: var(--kbm-green);
      color: var(--white);
    }

    .copy-btn i {
      margin-right: 0.5rem;
    }

    @media (max-width: 600px) {
      .wizard-container {
        padding: 1.5rem;
      }

      h1 {
        font-size: 1.5rem;
      }

      .toggle-group {
        flex-direction: column;
        align-items: stretch;
      }

      .toggle-group label {
        min-width: auto;
      }
    }
  </style>
</head>
<body>
  <div class="wizard-container">
    <h1>
      <i class="fas fa-hat-wizard"></i>
      Magic Formula by Measurement
    </h1>
    <p class="description">
      Shape your knitting using real measurements instead of stitch counts.<br>
      Enter your starting and ending widths, your row length, and gauge to instantly see your shaping instructions.
    </p>

    <form id="wizard-form">
      <div class="input-group toggle-group">
        <label>Units:</label>
        <div class="button-group">
          <button type="button" class="toggle-btn active" data-group="units" data-value="inches">Inches</button>
          <button type="button" class="toggle-btn" data-group="units" data-value="cm">Centimeters</button>
        </div>
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="startWidth" 
          step="0.25" 
          placeholder="Starting width in inches"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="endWidth" 
          step="0.25" 
          placeholder="Ending width in inches"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="totalLength" 
          step="0.25" 
          placeholder="Total length in inches"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="stitchGauge" 
          step="0.1" 
          placeholder="Stitches per inch"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="rowGauge" 
          step="0.1" 
          placeholder="Rows per inch"
          required
        />
      </div>

      <div class="input-group toggle-group">
        <label>Shape on:</label>
        <div class="button-group">
          <button type="button" class="toggle-btn active" data-group="sides" data-value="both">Both sides</button>
          <button type="button" class="toggle-btn" data-group="sides" data-value="one">One side only</button>
        </div>
      </div>

      <button type="submit" class="calculate-btn">Calculate Shaping</button>
    </form>

    <div id="results" class="results">
      <h2>Your Shaping Instructions</h2>
      <div id="resultsContent"></div>
      <button id="copyBtn" class="copy-btn">
        <i class="fas fa-copy"></i> Copy Instructions
      </button>
    </div>
  </div>

  <script is:inline>
    // Function to update placeholders based on unit
    function updatePlaceholders(unit) {
      const unitLabel = unit === 'inches' ? 'inches' : 'cm';
      const unitPerLabel = unit === 'inches' ? 'inch' : 'cm';
      
      document.getElementById('startWidth').placeholder = `Starting width in ${unitLabel}`;
      document.getElementById('endWidth').placeholder = `Ending width in ${unitLabel}`;
      document.getElementById('totalLength').placeholder = `Total length in ${unitLabel}`;
      document.getElementById('stitchGauge').placeholder = `Stitches per ${unitPerLabel}`;
      document.getElementById('rowGauge').placeholder = `Rows per ${unitPerLabel}`;
    }

    // Load saved unit preference from localStorage
    const savedUnit = localStorage.getItem('kbm-unit-preference') || 'inches';
    
    // Apply saved preference on page load
    document.querySelectorAll('[data-group="units"]').forEach(btn => {
      if (btn.dataset.value === savedUnit) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });
    updatePlaceholders(savedUnit);

    // Toggle button handling
    document.querySelectorAll('.toggle-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const group = this.dataset.group;
        document.querySelectorAll(`[data-group="${group}"]`).forEach(b => {
          b.classList.remove('active');
        });
        this.classList.add('active');
        
        // If units toggle, update placeholders and save preference
        if (group === 'units') {
          const selectedUnit = this.dataset.value;
          updatePlaceholders(selectedUnit);
          localStorage.setItem('kbm-unit-preference', selectedUnit);
        }
      });
    });

    // Form submission
    document.getElementById('wizard-form').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const startWidth = parseFloat(document.getElementById('startWidth').value);
      const endWidth = parseFloat(document.getElementById('endWidth').value);
      const totalLength = parseFloat(document.getElementById('totalLength').value);
      const stitchGauge = parseFloat(document.getElementById('stitchGauge').value);
      const rowGauge = parseFloat(document.getElementById('rowGauge').value);
      const units = document.querySelector('[data-group="units"].active').dataset.value;
      const sides = document.querySelector('[data-group="sides"].active').dataset.value;

      // Calculate stitches from measurements
      const startStitches = Math.round(startWidth * stitchGauge);
      const endStitches = Math.round(endWidth * stitchGauge);
      const stitchDifference = endStitches - startStitches;
      const totalRows = Math.round(totalLength * rowGauge);

      let instructions = '';
      
      // Handle no shaping needed
      if (stitchDifference === 0) {
        instructions += `<p><strong>No shaping needed!</strong></p>`;
        instructions += `<p>Your starting and ending widths are the same (${startStitches} stitches).</p>`;
        instructions += `<p>Simply knit ${totalRows} rows with no increases or decreases.</p>`;
      } else {
        // Determine increase or decrease
        const isIncrease = stitchDifference > 0;
        const totalStitchChange = Math.abs(stitchDifference);
        
        // Calculate per-side shaping if working both sides
        let shapingCount;
        if (sides === 'both') {
          // Check if both-sides shaping results in odd number - can't split evenly
          if (totalStitchChange % 2 !== 0) {
            instructions += `<div class="note" style="background: #f8d7da; border-color: #f5c6cb;">`;
            instructions += `<strong>Cannot shape evenly on both sides!</strong><br>`;
            instructions += `Your stitch difference (${totalStitchChange}) is odd and cannot be split evenly between two sides.<br>`;
            instructions += `Please adjust your measurements to create an even stitch difference, or choose "One side only" shaping.`;
            instructions += `</div>`;
            
            // Display the current result and return early
            document.getElementById('resultsContent').innerHTML = instructions;
            document.getElementById('results').classList.add('show');
            document.getElementById('results').scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            window.currentInstructions = document.getElementById('resultsContent').innerText;
            return;
          }
          shapingCount = totalStitchChange / 2;
        } else {
          shapingCount = totalStitchChange;
        }
        
        // Check if we have enough rows for the shaping
        if (shapingCount > totalRows) {
          instructions += `<div class="note" style="background: #f8d7da; border-color: #f5c6cb;">`;
          instructions += `<strong>Not enough rows!</strong><br>`;
          instructions += `You need ${shapingCount} ${isIncrease ? 'increases' : 'decreases'} but only have ${totalRows} rows.<br>`;
          instructions += `Please increase your total length or reduce the width difference.`;
          instructions += `</div>`;
          
          // Display and return early
          document.getElementById('resultsContent').innerHTML = instructions;
          document.getElementById('results').classList.add('show');
          document.getElementById('results').scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          window.currentInstructions = document.getElementById('resultsContent').innerText;
          return;
        }
        
        // Calculate shaping interval
        const spacing = Math.floor(totalRows / shapingCount);
        const remainder = totalRows % shapingCount;
        
        // Generate instructions
        const action = isIncrease ? 'Increase' : 'Decrease';
        const location = sides === 'both' ? 'at each end' : 'at the end';
        
        instructions += `<p><strong>Summary:</strong></p>`;
        instructions += `<p>Starting stitches: ${startStitches}</p>`;
        instructions += `<p>Ending stitches: ${endStitches}</p>`;
        instructions += `<p>Total rows: ${totalRows}</p>`;
        instructions += `<p>${action}s needed: ${shapingCount} ${sides === 'both' ? 'per side' : 'total'}</p>`;
        instructions += `<p><strong>Instructions:</strong></p>`;
        
        if (remainder === 0) {
          // Perfect division
          instructions += `<p>${action} 1 stitch ${location} every ${spacing} rows, ${shapingCount} times.</p>`;
        } else {
          // Uneven division - distribute shapings across available rows
          const timesAtLonger = remainder;
          const timesAtShorter = shapingCount - remainder;
          const longerInterval = spacing + 1;
          
          instructions += `<p>${action} 1 stitch ${location}:</p>`;
          if (timesAtShorter > 0) {
            instructions += `<p>• Every ${spacing} rows, ${timesAtShorter} times</p>`;
          }
          instructions += `<p>• Every ${longerInterval} rows, ${timesAtLonger} times</p>`;
          
          instructions += `<div class="note">`;
          instructions += `<strong>Note:</strong> Your shaping doesn't divide evenly. Alternate between the two intervals above to distribute the shaping evenly across your ${totalRows} rows.`;
          instructions += `</div>`;
        }
      }

      // Display results
      document.getElementById('resultsContent').innerHTML = instructions;
      document.getElementById('results').classList.add('show');
      document.getElementById('results').scrollIntoView({ behavior: 'smooth', block: 'nearest' });

      // Store for copying
      window.currentInstructions = document.getElementById('resultsContent').innerText;
    });

    // Copy button
    document.getElementById('copyBtn').addEventListener('click', function() {
      if (window.currentInstructions) {
        navigator.clipboard.writeText(window.currentInstructions).then(() => {
          const originalText = this.innerHTML;
          this.innerHTML = '<i class="fas fa-check"></i> Copied!';
          setTimeout(() => {
            this.innerHTML = originalText;
          }, 2000);
        });
      }
    });
  </script>
</body>
</html>

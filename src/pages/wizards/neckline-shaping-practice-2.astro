---
import BaseLayout from "../../layouts/BaseLayout.astro";
import ActionBar from "../../components/wizards/ActionBar.astro";
---

<BaseLayout 
  title="Neckline Shaping Practice | Knit by Machine" 
  description="Build your neckline-shaping skills. This tool creates stitch and row numbers for a small practice piece so you can refine your technique.">

<style>
.wizard-page {
  padding-top: 120px;
  padding-bottom: 3rem;
  min-height: 100vh;
  background: var(--page-bg);
}

.page-header {
  max-width: 800px;
  margin: 0 auto 2rem;
  padding: 0 1rem;
}

.page-header-title {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 0.75rem;
  flex-wrap: wrap;
}

@media (max-width: 640px) {
  .page-header-title {
    flex-direction: column;
    gap: 0.75rem;
  }
}

.page-header h1 {
  color: var(--kbm-green);
  font-size: 2rem;
  font-weight: 700;
  margin: 0;
}

.page-header p {
  color: #6b7280;
  font-size: 1.05rem;
  line-height: 1.6;
  text-align: center;
}

.video-button {
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
  padding: 0.5rem 1rem;
  background: var(--kbm-green);
  color: white;
  text-decoration: none;
  font-weight: 600;
  border-radius: 6px;
  transition: all 0.2s;
  border: none;
  cursor: pointer;
  font-size: 0.9rem;
  white-space: nowrap;
}

.video-button:hover {
  background: #6E8B3D;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(82, 104, 45, 0.3);
}

.wizard-container {
  max-width: 900px;
  margin: 0 auto;
  padding: 0 1rem 120px 1rem;
}

.calculator-card {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  margin-bottom: 2rem;
}

.units-toggle {
  display: flex;
  gap: 0.5rem;
  justify-content: center;
  margin-bottom: 2rem;
  padding: 4px;
  background: #f3f4f6;
  border-radius: 8px;
  width: fit-content;
  margin-left: auto;
  margin-right: auto;
}

.unit-btn {
  padding: 0.5rem 1.5rem;
  border: none;
  background: transparent;
  color: #6b7280;
  font-weight: 600;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 0.95rem;
}

.unit-btn.active {
  background: var(--kbm-green);
  color: white;
}

.section-title {
  color: var(--kbm-green);
  font-size: 1.2rem;
  font-weight: 700;
  margin-bottom: 1rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid rgba(82, 104, 45, 0.2);
}

.input-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.input-group {
  margin-bottom: 1.5rem;
}

.input-group label {
  display: block;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: #374151;
  font-size: 0.95rem;
}

.input-group input {
  width: 100%;
  padding: 0.75rem;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.2s;
}

.input-group input:focus {
  outline: none;
  border-color: var(--kbm-green);
}

.input-group input.error {
  border-color: #dc3545;
}

.input-group input.warning {
  border-color: #ffc107;
}

.validation-message {
  margin-top: 0.25rem;
  font-size: 0.85rem;
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.validation-message.error {
  color: #dc3545;
}

.validation-message.warning {
  color: #ff8c00;
}

.results-section {
  margin-top: 2rem;
}

.results-card {
  background: rgba(82, 104, 45, 0.05);
  padding: 1.5rem;
  border-radius: 8px;
  border-left: 4px solid var(--kbm-green);
  margin-bottom: 1rem;
}

.results-card h4 {
  color: var(--kbm-green);
  font-weight: 700;
  margin-bottom: 1rem;
  font-size: 1.1rem;
}

.result-row {
  background: white;
  padding: 0.75rem 1rem;
  border-radius: 6px;
  margin-bottom: 0.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.result-label {
  color: #6b7280;
  font-size: 0.9rem;
}

.result-value {
  color: var(--kbm-green);
  font-weight: 700;
  font-size: 1rem;
}

.shaping-steps {
  background: white;
  padding: 1rem;
  border-radius: 6px;
  margin-top: 1rem;
}

.shaping-steps ol {
  margin: 0;
  padding-left: 1.5rem;
}

.shaping-steps li {
  color: #374151;
  line-height: 1.8;
  margin-bottom: 0.5rem;
}

.shaping-steps strong {
  color: var(--kbm-green);
}

@media (max-width: 640px) {
  .input-grid {
    grid-template-columns: 1fr;
  }
}

@media print {
  .wizard-page {
    padding-top: 20px;
  }
  
  .page-header, .video-button, .units-toggle {
    display: none;
  }
  
  .calculator-card {
    box-shadow: none;
  }
}
</style>

<div class="wizard-page">
  <div class="page-header">
    <div class="page-header-title">
      <h1>Neckline Shaping Practice</h1>
      <button class="video-button" onclick="alert('Video tutorial coming soon!')">
        <i class="fas fa-play-circle"></i> Watch Tutorial
      </button>
    </div>
    <p>
      Unsure about necklines? Try it here first. Build your skills with guided exercises before starting a full sweater.
    </p>
  </div>

  <div class="wizard-container">
    <div class="calculator-card">
      <!-- Units Toggle -->
      <div class="units-toggle">
        <button class="unit-btn active" id="btn-inches">Inches</button>
        <button class="unit-btn" id="btn-cm">Centimeters</button>
      </div>

      <!-- Gauge Section -->
      <h3 class="section-title">Your Gauge</h3>
      <div class="input-grid">
        <div class="input-group">
          <label for="stitches-gauge">Stitch Gauge</label>
          <input 
            type="number" 
            id="stitches-gauge" 
            step="0.1" 
            placeholder="stitches per 4&quot;"
          />
          <div class="validation-message" id="stitches-message"></div>
        </div>
        <div class="input-group">
          <label for="rows-gauge">Row Gauge</label>
          <input 
            type="number" 
            id="rows-gauge" 
            step="0.1" 
            placeholder="rows per 4&quot;"
          />
          <div class="validation-message" id="rows-message"></div>
        </div>
      </div>

      <!-- Practice Piece Dimensions -->
      <h3 class="section-title">Practice Piece Dimensions</h3>
      <div class="input-grid">
        <div class="input-group">
          <label for="piece-width">Width</label>
          <input 
            type="number" 
            id="piece-width" 
            step="0.5" 
            placeholder="e.g., 12"
          />
        </div>
        <div class="input-group">
          <label for="neckline-depth">Neckline Depth</label>
          <input 
            type="number" 
            id="neckline-depth" 
            step="0.5" 
            placeholder="e.g., 6"
          />
        </div>
      </div>

      <div class="input-group">
        <label for="neck-width">Neck Opening Width</label>
        <input 
          type="number" 
          id="neck-width" 
          step="0.5" 
          placeholder="e.g., 4"
        />
      </div>

      <!-- Results Section -->
      <div id="results" style="display: none;">
        <div class="results-section">
          <div class="results-card">
            <h4>Practice Piece Setup</h4>
            <div class="result-row">
              <span class="result-label">Cast on:</span>
              <span class="result-value" id="cast-on">--</span>
            </div>
            <div class="result-row">
              <span class="result-label">Knit straight for:</span>
              <span class="result-value" id="straight-rows">--</span>
            </div>
          </div>

          <div class="results-card">
            <h4>Neckline Shaping Instructions</h4>
            <div class="shaping-steps" id="shaping-instructions">
              <!-- Instructions will be inserted here -->
            </div>
          </div>

          <div class="results-card">
            <h4>Shoulder Shaping</h4>
            <div class="shaping-steps" id="shoulder-instructions">
              <!-- Instructions will be inserted here -->
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

<ActionBar />

<script>
  // State
  let units = 'inches';
  let stitchesGauge = '';
  let rowsGauge = '';
  let pieceWidth = '';
  let necklineDepth = '';
  let neckWidth = '';

  // DOM elements
  const btnInches = document.getElementById('btn-inches');
  const btnCm = document.getElementById('btn-cm');
  const inputStitches = document.getElementById('stitches-gauge');
  const inputRows = document.getElementById('rows-gauge');
  const inputWidth = document.getElementById('piece-width');
  const inputDepth = document.getElementById('neckline-depth');
  const inputNeck = document.getElementById('neck-width');
  const stitchesMsg = document.getElementById('stitches-message');
  const rowsMsg = document.getElementById('rows-message');
  const resultsSection = document.getElementById('results');
  const actionBar = document.getElementById('action-bar');
  const startOverBtn = document.getElementById('start-over-btn');
  const printBtn = document.getElementById('print-btn');

  // Validation
  function validateGauge(value, type) {
    if (!value) return { valid: true, message: '', class: '' };
    
    const num = parseFloat(value);
    if (isNaN(num)) {
      return { valid: false, message: 'Please enter a valid number', class: 'error' };
    }
    if (num < 2) {
      return { valid: false, message: 'Value must be at least 2', class: 'error' };
    }
    if (num > 80) {
      return { valid: false, message: 'Value must be 80 or less', class: 'error' };
    }
    
    if (type === 'stitches' && (num < 10 || num > 50)) {
      return { valid: true, message: 'That seems unusual — double-check your entry', class: 'warning' };
    }
    if (type === 'rows' && (num < 10 || num > 60)) {
      return { valid: true, message: 'That seems unusual — double-check your entry', class: 'warning' };
    }
    
    return { valid: true, message: '', class: '' };
  }

  function updateValidation(input, msgEl, type) {
    const validation = validateGauge(input.value, type);
    input.className = validation.class;
    if (validation.message) {
      const icon = validation.class === 'error' ? 'exclamation-circle' : 'exclamation-triangle';
      msgEl.className = `validation-message ${validation.class}`;
      msgEl.innerHTML = `<i class="fas fa-${icon}"></i> ${validation.message}`;
    } else {
      msgEl.className = 'validation-message';
      msgEl.innerHTML = '';
    }
    return validation.valid;
  }

  // Unit toggle
  btnInches.addEventListener('click', () => {
    units = 'inches';
    btnInches.classList.add('active');
    btnCm.classList.remove('active');
    inputStitches.placeholder = 'stitches per 4"';
    inputRows.placeholder = 'rows per 4"';
    calculate();
  });

  btnCm.addEventListener('click', () => {
    units = 'cm';
    btnCm.classList.add('active');
    btnInches.classList.remove('active');
    inputStitches.placeholder = 'stitches per 10cm';
    inputRows.placeholder = 'rows per 10cm';
    calculate();
  });

  // Input handlers
  inputStitches.addEventListener('input', (e) => {
    stitchesGauge = e.target.value;
    updateValidation(inputStitches, stitchesMsg, 'stitches');
    calculate();
  });

  inputRows.addEventListener('input', (e) => {
    rowsGauge = e.target.value;
    updateValidation(inputRows, rowsMsg, 'rows');
    calculate();
  });

  inputWidth.addEventListener('input', (e) => {
    pieceWidth = e.target.value;
    calculate();
  });

  inputDepth.addEventListener('input', (e) => {
    necklineDepth = e.target.value;
    calculate();
  });

  inputNeck.addEventListener('input', (e) => {
    neckWidth = e.target.value;
    calculate();
  });

  startOverBtn.addEventListener('click', () => {
    inputStitches.value = '';
    inputRows.value = '';
    inputWidth.value = '';
    inputDepth.value = '';
    inputNeck.value = '';
    stitchesGauge = rowsGauge = pieceWidth = necklineDepth = neckWidth = '';
    units = 'inches';
    btnInches.classList.add('active');
    btnCm.classList.remove('active');
    stitchesMsg.className = 'validation-message';
    stitchesMsg.innerHTML = '';
    rowsMsg.className = 'validation-message';
    rowsMsg.innerHTML = '';
    resultsSection.style.display = 'none';
    actionBar.style.display = 'none';
  });

  printBtn.addEventListener('click', () => {
    window.print();
  });

  // Neckline calculation (from neckline.js)
  function calculateNeckline(widthSts, depthRows, neckWidthSts) {
    // Ensure even shoulder division
    let adjustedNeckSts = neckWidthSts;
    if ((widthSts - neckWidthSts) % 2 !== 0) {
      adjustedNeckSts = neckWidthSts + 1;
    }
    
    const shoulderSts = Math.floor((widthSts - adjustedNeckSts) / 2);
    const bindOffSts = Math.floor(widthSts / 3);
    const sideTotal = Math.floor(widthSts / 2);
    const totalDecreases = Math.max(0, adjustedNeckSts - bindOffSts);
    const perSideDecreases = Math.floor(totalDecreases / 2);
    
    const section1Decreases = Math.floor(perSideDecreases / 2);
    const section2Decreases = perSideDecreases - section1Decreases;
    
    const section1Rows = section1Decreases * 2;
    const section2Rows = section2Decreases;
    const shapingRows = section1Rows + section2Rows;
    
    const shoulderDropRows = Math.max(1, Math.round(depthRows * 0.25));
    const remainingRows = Math.max(0, depthRows - shapingRows - shoulderDropRows);
    
    // Distribute shoulder shaping
    const turnBlocks = [];
    if (shoulderDropRows > 0 && shoulderSts > 0) {
      const perGroup = Math.floor(shoulderSts / shoulderDropRows);
      const extra = shoulderSts % shoulderDropRows;
      for (let i = 0; i < shoulderDropRows; i++) {
        turnBlocks.push(perGroup + (i < extra ? 1 : 0));
      }
    }
    
    return {
      shoulderSts,
      bindOffSts,
      sideTotal,
      section1Decreases,
      section2Decreases,
      section1Rows,
      section2Rows,
      remainingRows,
      shoulderDropRows,
      turnBlocks
    };
  }

  function calculate() {
    const divisor = units === 'inches' ? 4 : 10;
    const stsPerUnit = parseFloat(stitchesGauge) / divisor;
    const rowsPerUnit = parseFloat(rowsGauge) / divisor;
    
    const width = parseFloat(pieceWidth);
    const depth = parseFloat(necklineDepth);
    const neck = parseFloat(neckWidth);
    
    if (!stsPerUnit || !rowsPerUnit || !width || !depth || !neck) {
      resultsSection.style.display = 'none';
      return;
    }
    
    // Convert measurements to stitches/rows
    const widthSts = Math.round(width * stsPerUnit);
    const depthRows = Math.round(depth * rowsPerUnit);
    const neckWidthSts = Math.round(neck * stsPerUnit);
    
    const result = calculateNeckline(widthSts, depthRows, neckWidthSts);
    
    // Display results
    document.getElementById('cast-on').textContent = `${widthSts} stitches`;
    document.getElementById('straight-rows').textContent = `${depthRows} rows before neckline`;
    
    // Shaping instructions
    let shapingHTML = '<ol>';
    shapingHTML += `<li>On the next row, <strong>bind off ${result.bindOffSts} center stitches</strong></li>`;
    shapingHTML += `<li>Put ${result.sideTotal} stitches on scrap yarn (right side)</li>`;
    shapingHTML += `<li><strong>Left Side:</strong></li>`;
    if (result.section1Decreases > 0) {
      shapingHTML += `<li>Decrease 1 stitch every 2 rows, ${result.section1Decreases} times (${result.section1Rows} rows)</li>`;
    }
    if (result.section2Decreases > 0) {
      shapingHTML += `<li>Decrease 1 stitch every row, ${result.section2Decreases} times (${result.section2Rows} rows)</li>`;
    }
    if (result.remainingRows > 0) {
      shapingHTML += `<li>Knit ${result.remainingRows} rows straight</li>`;
    }
    shapingHTML += `<li>Final shoulder: ${result.shoulderSts} stitches</li>`;
    shapingHTML += `<li><strong>Right Side:</strong> Repeat same steps</li>`;
    shapingHTML += '</ol>';
    document.getElementById('shaping-instructions').innerHTML = shapingHTML;
    
    // Shoulder instructions
    let shoulderHTML = '<ol>';
    shoulderHTML += `<li>Work short rows over ${result.shoulderDropRows} groups:</li>`;
    result.turnBlocks.forEach((sts, i) => {
      shoulderHTML += `<li>Group ${i + 1}: Turn ${sts} stitches from shoulder edge</li>`;
    });
    shoulderHTML += `<li>Bind off remaining ${result.shoulderSts} stitches</li>`;
    shoulderHTML += '</ol>';
    document.getElementById('shoulder-instructions').innerHTML = shoulderHTML;
    
    resultsSection.style.display = 'block';
    actionBar.style.display = 'flex';
    printBtn.style.display = 'inline-flex';
  }
</script>

</BaseLayout>

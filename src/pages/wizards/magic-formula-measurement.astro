---
import BaseLayout from "../../layouts/BaseLayout.astro";

const pageTitle = "Magic Formula by Measurement | Knit by Machine";
const pageDescription = "Calculate shaping with the Magic Formula using measurements. Enter your starting and ending widths and gauge to create clear knitting instructions.";
---

<BaseLayout title={pageTitle} description={pageDescription}>

<style>
.wizard-page {
  padding-top: 120px;
  padding-bottom: 3rem;
  min-height: 100vh;
  background: var(--page-bg);
}

.page-header {
  text-align: center;
  max-width: 800px;
  margin: 0 auto 2rem;
  padding: 0 1rem;
}

.page-header h1 {
  color: var(--kbm-green);
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
}

.page-header p {
  color: #6b7280;
  font-size: 1.05rem;
  line-height: 1.6;
}

.video-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: var(--kbm-green);
  color: white;
  text-decoration: none;
  font-weight: 600;
  border-radius: 8px;
  margin: 1.5rem 0;
  transition: all 0.2s;
  border: none;
  cursor: pointer;
  font-size: 1rem;
}

.video-button:hover {
  background: #6E8B3D;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(82, 104, 45, 0.3);
}

.wizard-container {
  max-width: 600px;
  margin: 0 auto;
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.description {
  text-align: center;
  color: var(--text-dark);
  margin-bottom: 2rem;
  font-size: 0.95rem;
  line-height: 1.5;
}

.input-group {
  margin-bottom: 1.25rem;
}

.input-group label {
  display: block;
  font-weight: 500;
  margin-bottom: 0.5rem;
  color: var(--text-dark);
}

input[type="number"],
select {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #d0d5cc;
  border-radius: 4px;
  font-family: var(--font);
  font-size: 1rem;
  color: var(--text-dark);
  transition: border-color 0.2s;
}

input[type="number"]:focus,
select:focus {
  outline: none;
  border-color: var(--kbm-green);
}

.toggle-group {
  display: flex;
  gap: 1rem;
  align-items: center;
  justify-content: center;
  margin-bottom: 1.5rem;
}

.unit-toggle-wrapper {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  color: var(--text-dark);
}

.unit-label {
  min-width: 25px;
  text-align: center;
}

.switch {
  position: relative;
  display: inline-block;
  width: 44px;
  height: 24px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--kbm-green);
  transition: 0.3s;
  border-radius: 24px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 18px;
  width: 18px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  transition: 0.3s;
  border-radius: 50%;
}

input:checked + .slider:before {
  transform: translateX(20px);
}

.sides-group {
  display: flex;
  gap: 0.5rem;
  flex: 1;
}

.sides-btn {
  flex: 1;
  padding: 0.75rem;
  border: 1px solid #d0d5cc;
  background: white;
  color: var(--text-dark);
  border-radius: 4px;
  cursor: pointer;
  font-family: var(--font);
  font-size: 0.95rem;
  transition: all 0.2s;
}

.sides-btn.active {
  background: var(--kbm-green);
  color: white;
  border-color: var(--kbm-green);
}

.calculate-btn {
  width: 100%;
  padding: 1rem;
  background: var(--kbm-green);
  color: white;
  border: none;
  border-radius: 4px;
  font-family: var(--font);
  font-size: 1.05rem;
  font-weight: 600;
  cursor: pointer;
  margin-top: 1.5rem;
  transition: background 0.2s;
}

.calculate-btn:hover {
  background: #445626;
}

.results {
  display: none;
  margin-top: 2rem;
  padding: 1.5rem;
  background: var(--kbm-bg);
  border-radius: 4px;
  border-left: 4px solid var(--kbm-green);
}

.results.show {
  display: block;
}

.results h2 {
  color: var(--kbm-green);
  font-size: 1.25rem;
  margin: 0 0 1rem 0;
}

.note {
  margin-top: 1rem;
  padding: 1rem;
  background: #fff3cd;
  border-left: 3px solid #ffc107;
  border-radius: 4px;
  font-size: 0.9rem;
}

.copy-btn {
  margin-top: 1rem;
  padding: 0.65rem 1.25rem;
  background: white;
  color: var(--kbm-green);
  border: 2px solid var(--kbm-green);
  border-radius: 4px;
  font-family: var(--font);
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.copy-btn:hover {
  background: var(--kbm-green);
  color: white;
}
</style>

<div class="wizard-page">
  <div class="page-header">
    <h1>Magic Formula by Measurement</h1>
    <p>
      Shape your knitting using real measurements instead of stitch counts.
      Enter your starting and ending widths, your row length, and gauge to instantly see your shaping instructions.
    </p>
    <button class="video-button" onclick="alert('Video tutorial coming soon!')">
      <i class="fas fa-play-circle"></i>
      Watch Video Tutorial
    </button>
  </div>

  <div class="wizard-container">
    <form id="wizard-form">
      <div class="toggle-group">
        <div class="unit-toggle-wrapper">
          <span class="unit-label">in</span>
          <label class="switch">
            <input type="checkbox" id="unitToggle">
            <span class="slider"></span>
          </label>
          <span class="unit-label">cm</span>
        </div>
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="startWidth" 
          step="0.25" 
          placeholder="Starting width in inches"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="endWidth" 
          step="0.25" 
          placeholder="Ending width in inches"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="totalLength" 
          step="0.25" 
          placeholder="Total length in inches"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="stitchGauge" 
          step="0.1" 
          placeholder="Stitches per inch"
          required
        />
      </div>

      <div class="input-group">
        <input 
          type="number" 
          id="rowGauge" 
          step="0.1" 
          placeholder="Rows per inch"
          required
        />
      </div>

      <div class="input-group" style="display: flex; gap: 1rem; align-items: center;">
        <label style="font-weight: 500; min-width: 80px;">Shape on:</label>
        <div class="sides-group">
          <button type="button" class="sides-btn active" data-value="both">Both sides</button>
          <button type="button" class="sides-btn" data-value="one">One side only</button>
        </div>
      </div>

      <button type="submit" class="calculate-btn">Calculate Shaping</button>
    </form>

    <div id="results" class="results">
      <h2>Your Shaping Instructions</h2>
      <div id="resultsContent"></div>
      <button id="copyBtn" class="copy-btn">
        <i class="fas fa-copy"></i> Copy Instructions
      </button>
    </div>
  </div>
</div>

<script is:inline>
  const unitToggle = document.getElementById('unitToggle');

  function updatePlaceholders() {
    const isCm = unitToggle.checked;
    const unitLabel = isCm ? 'cm' : 'inches';
    const unitPerLabel = isCm ? 'cm' : 'inch';
    
    document.getElementById('startWidth').placeholder = `Starting width in ${unitLabel}`;
    document.getElementById('endWidth').placeholder = `Ending width in ${unitLabel}`;
    document.getElementById('totalLength').placeholder = `Total length in ${unitLabel}`;
    document.getElementById('stitchGauge').placeholder = `Stitches per ${unitPerLabel}`;
    document.getElementById('rowGauge').placeholder = `Rows per ${unitPerLabel}`;
  }

  const savedUnit = localStorage.getItem('kbm-unit-preference') || 'in';
  if (savedUnit === 'cm') {
    unitToggle.checked = true;
  }
  updatePlaceholders();

  unitToggle.addEventListener('change', function() {
    updatePlaceholders();
    localStorage.setItem('kbm-unit-preference', this.checked ? 'cm' : 'in');
  });

  document.querySelectorAll('.sides-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      document.querySelectorAll('.sides-btn').forEach(b => b.classList.remove('active'));
      this.classList.add('active');
    });
  });

  document.getElementById('wizard-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const startWidth = parseFloat(document.getElementById('startWidth').value);
    const endWidth = parseFloat(document.getElementById('endWidth').value);
    const totalLength = parseFloat(document.getElementById('totalLength').value);
    const stitchGauge = parseFloat(document.getElementById('stitchGauge').value);
    const rowGauge = parseFloat(document.getElementById('rowGauge').value);
    const sides = document.querySelector('.sides-btn.active').dataset.value;

    const startStitches = Math.round(startWidth * stitchGauge);
    const endStitches = Math.round(endWidth * stitchGauge);
    const stitchDifference = endStitches - startStitches;
    const totalRows = Math.round(totalLength * rowGauge);

    let instructions = '';
    
    if (stitchDifference === 0) {
      instructions += `<p><strong>No shaping needed!</strong></p>`;
      instructions += `<p>Your starting and ending widths are the same (${startStitches} stitches).</p>`;
      instructions += `<p>Simply knit ${totalRows} rows with no increases or decreases.</p>`;
    } else {
      const isIncrease = stitchDifference > 0;
      const totalStitchChange = Math.abs(stitchDifference);
      
      let shapingCount;
      if (sides === 'both') {
        if (totalStitchChange % 2 !== 0) {
          instructions += `<div class="note" style="background: #f8d7da; border-color: #f5c6cb;">`;
          instructions += `<strong>Cannot shape evenly on both sides!</strong><br>`;
          instructions += `Your stitch difference (${totalStitchChange}) is odd and cannot be split evenly between two sides.<br>`;
          instructions += `Please adjust your measurements to create an even stitch difference, or choose "One side only" shaping.`;
          instructions += `</div>`;
          
          document.getElementById('resultsContent').innerHTML = instructions;
          document.getElementById('results').classList.add('show');
          window.currentInstructions = document.getElementById('resultsContent').innerText;
          return;
        }
        shapingCount = totalStitchChange / 2;
      } else {
        shapingCount = totalStitchChange;
      }
      
      if (shapingCount > totalRows) {
        instructions += `<div class="note" style="background: #f8d7da; border-color: #f5c6cb;">`;
        instructions += `<strong>Not enough rows!</strong><br>`;
        instructions += `You need ${shapingCount} ${isIncrease ? 'increases' : 'decreases'} but only have ${totalRows} rows.<br>`;
        instructions += `Please increase your total length or reduce the width difference.`;
        instructions += `</div>`;
        
        document.getElementById('resultsContent').innerHTML = instructions;
        document.getElementById('results').classList.add('show');
        window.currentInstructions = document.getElementById('resultsContent').innerText;
        return;
      }
      
      const spacing = Math.floor(totalRows / shapingCount);
      const remainder = totalRows % shapingCount;
      
      const action = isIncrease ? 'Increase' : 'Decrease';
      const location = sides === 'both' ? 'at each end' : 'at the end';
      
      instructions += `<p><strong>Summary:</strong></p>`;
      instructions += `<p>Starting stitches: ${startStitches}</p>`;
      instructions += `<p>Ending stitches: ${endStitches}</p>`;
      instructions += `<p>Total rows: ${totalRows}</p>`;
      instructions += `<p>${action}s needed: ${shapingCount} ${sides === 'both' ? 'per side' : 'total'}</p>`;
      instructions += `<p><strong>Instructions:</strong></p>`;
      
      if (remainder === 0) {
        instructions += `<p>${action} 1 stitch ${location} every ${spacing} rows, ${shapingCount} times.</p>`;
      } else {
        const timesAtLonger = remainder;
        const timesAtShorter = shapingCount - remainder;
        const longerInterval = spacing + 1;
        
        instructions += `<p>${action} 1 stitch ${location}:</p>`;
        if (timesAtShorter > 0) {
          instructions += `<p>• Every ${spacing} rows, ${timesAtShorter} times</p>`;
        }
        instructions += `<p>• Every ${longerInterval} rows, ${timesAtLonger} times</p>`;
        
        instructions += `<div class="note">`;
        instructions += `<strong>Note:</strong> Your shaping doesn't divide evenly. Alternate between the two intervals above to distribute the shaping evenly across your ${totalRows} rows.`;
        instructions += `</div>`;
      }
    }

    document.getElementById('resultsContent').innerHTML = instructions;
    document.getElementById('results').classList.add('show');
    document.getElementById('results').scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    window.currentInstructions = document.getElementById('resultsContent').innerText;
  });

  document.getElementById('copyBtn').addEventListener('click', function() {
    if (window.currentInstructions) {
      navigator.clipboard.writeText(window.currentInstructions).then(() => {
        const originalText = this.innerHTML;
        this.innerHTML = '<i class="fas fa-check"></i> Copied!';
        setTimeout(() => {
          this.innerHTML = originalText;
        }, 2000);
      });
    }
  });
</script>

</BaseLayout>

---
import BaseLayout from "../../layouts/BaseLayout.astro";
import ActionBar from "../../components/wizards/ActionBar.astro";
---

<BaseLayout 
  title="Corner-to-Corner Blanket Calculator | Knit by Machine" 
  description="Estimate the finished dimensions of a diagonally knitted (corner-to-corner) blanket based on your gauge and cast-on stitches.">

<style>
.wizard-page {
  padding-top: 120px;
  padding-bottom: 3rem;
  min-height: 100vh;
  background: var(--page-bg);
}

.page-header {
  max-width: 800px;
  margin: 0 auto 2rem;
  padding: 0 1rem;
}

.page-header-title {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 0.75rem;
  flex-wrap: wrap;
}

@media (max-width: 640px) {
  .page-header-title {
    flex-direction: column;
    gap: 0.75rem;
  }
}

.page-header h1 {
  color: var(--kbm-green);
  font-size: 2rem;
  font-weight: 700;
  margin: 0;
}

.page-header p {
  color: #6b7280;
  font-size: 1.05rem;
  line-height: 1.6;
  text-align: center;
}

.video-button {
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
  padding: 0.5rem 1rem;
  background: #e5e7eb;
  color: #374151;
  text-decoration: none;
  font-weight: 600;
  border-radius: 6px;
  transition: all 0.2s;
  border: 1px solid #d1d5db;
  cursor: pointer;
  font-size: 0.9rem;
  white-space: nowrap;
}

.video-button:hover {
  background: #d1d5db;
  transform: translateY(-1px);
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.wizard-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 1rem;
}

.calculator-card {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  margin-bottom: 1.5rem;
}

.section-title {
  color: var(--kbm-green);
  font-size: 1.3rem;
  font-weight: 700;
  margin: 0 0 1.5rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid #eef0ea;
}

.units-toggle {
  display: flex;
  gap: 0.75rem;
  margin-bottom: 1.5rem;
  justify-content: center;
}

.unit-btn {
  padding: 0.6rem 1.5rem;
  background: white;
  color: #374151;
  border: 2px solid #e5e7eb;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 0.95rem;
  font-weight: 600;
}

.unit-btn.active {
  background: var(--kbm-green);
  color: white;
  border-color: var(--kbm-green);
}

.unit-btn:hover:not(.active) {
  border-color: #d1d5db;
  background: #f9fafb;
}

.input-group {
  margin-bottom: 1.5rem;
}

.input-label {
  display: block;
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 1rem;
}

.input-label .label-hint {
  color: #6b7280;
  font-weight: 400;
  font-size: 0.9rem;
}

.input-field {
  width: 100%;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  transition: all 0.2s;
  font-family: inherit;
}

.input-field:focus {
  outline: none;
  border-color: var(--kbm-green);
  box-shadow: 0 0 0 3px rgba(82, 104, 45, 0.1);
}

.input-field::placeholder {
  color: #9ca3af;
}

.gauge-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

@media (max-width: 600px) {
  .gauge-row {
    grid-template-columns: 1fr;
  }
}

.button-row {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
}

.calculate-btn {
  flex: 1;
  background: var(--kbm-green);
  color: white;
  padding: 1rem 2rem;
  font-size: 1.1rem;
  font-weight: 700;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s;
}

.calculate-btn:hover {
  background: #3f5123;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(82, 104, 45, 0.25);
}

.calculate-btn:active {
  transform: translateY(0);
}

.reset-btn {
  padding: 1rem 2rem;
  background: white;
  color: #6b7280;
  font-size: 1.1rem;
  font-weight: 600;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s;
}

.reset-btn:hover {
  border-color: #d1d5db;
  background: #f9fafb;
}

.footnote {
  text-align: center;
  color: #6b7280;
  font-size: 0.9rem;
  margin-top: 1rem;
  font-style: italic;
}

.error-message {
  background: #fef2f2;
  border-left: 4px solid #ef4444;
  color: #991b1b;
  padding: 1rem;
  border-radius: 6px;
  margin-bottom: 1.5rem;
  font-size: 0.95rem;
  display: none;
}

.error-message.show {
  display: block;
}

.results-container {
  background: #f0f4e8;
  border-left: 4px solid var(--kbm-green);
  padding: 1.5rem;
  border-radius: 8px;
  margin-top: 2rem;
  display: none;
}

.results-container.show {
  display: block;
}

.results-title {
  color: var(--kbm-green);
  font-size: 1.3rem;
  font-weight: 700;
  margin: 0 0 1.5rem;
}

.result-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.result-item {
  background: white;
  padding: 1rem;
  border-radius: 8px;
  text-align: center;
}

.result-label {
  color: #6b7280;
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.result-value {
  color: var(--kbm-green);
  font-size: 2rem;
  font-weight: 700;
  margin: 0;
}

.result-unit {
  font-size: 1rem;
  color: #6b7280;
}

.instructions-box {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  margin-top: 1rem;
}

.instructions-title {
  color: #374151;
  font-size: 1.1rem;
  font-weight: 700;
  margin: 0 0 1rem;
}

.instructions-text {
  color: #4b5563;
  line-height: 1.6;
  margin: 0;
}

.diagram-container {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  margin-top: 1.5rem;
  text-align: center;
}

.diagram-title {
  color: #374151;
  font-size: 1.1rem;
  font-weight: 700;
  margin: 0 0 1.5rem;
}

.print-footer {
  display: none;
  text-align: center;
  font-family: "Poppins", Arial, sans-serif;
  font-size: 10pt;
  color: #666;
  margin-top: 2rem;
  padding-top: 1rem;
  border-top: 1px solid #ddd;
}

/* Print styles */
@media print {
  .wizard-page {
    padding-top: 0 !important;
    background: white !important;
  }
  
  .page-header,
  .calculator-card,
  .no-print {
    display: none !important;
  }
  
  .results-container {
    background: white !important;
    border: none !important;
    padding: 0 !important;
    margin: 0 !important;
  }
  
  .result-grid,
  .instructions-box,
  .diagram-container {
    background: white !important;
    page-break-inside: avoid;
  }
  
  .diagram-container,
  .diagram-container svg {
    display: block !important;
    page-break-inside: avoid;
    background: white !important;
  }
  
  .print-footer {
    display: block !important;
    text-align: center;
    font-family: "Poppins", Arial, sans-serif;
    font-size: 10pt;
    color: #666;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid #ddd;
    background: white !important;
  }
}
</style>

<div class="wizard-page">
  <div class="page-header">
    <div class="page-header-title">
      <h1>Corner-to-Corner Blanket Calculator</h1>
      <button class="video-button" onclick="alert('Video tutorial coming soon!')">
        <i class="fas fa-play-circle"></i> Watch Tutorial
      </button>
    </div>
    <p>
      Estimate the finished dimensions of a diagonally knitted blanket or panel based on your gauge and number of cast-on stitches.
    </p>
  </div>
  
  <div class="wizard-container">
    <div class="calculator-card">
      <h2 class="section-title">Calculate Dimensions</h2>
      
      <!-- Units Toggle -->
      <div class="units-toggle">
        <button class="unit-btn active" id="btn-inches" data-testid="button-inches">Inches</button>
        <button class="unit-btn" id="btn-cm" data-testid="button-cm">Centimeters</button>
      </div>
      
      <div id="error-message" class="error-message" role="alert" aria-live="polite">
        Please enter valid positive numbers for all fields.
      </div>
      
      <div class="input-group">
        <label for="needles" class="input-label">
          How many needles can you use at the widest point?
        </label>
        <input 
          type="number" 
          id="needles" 
          class="input-field" 
          placeholder="How many needles?"
          min="1"
          step="1"
          data-testid="input-needles"
        />
      </div>
      
      <div class="gauge-row">
        <div class="input-group">
          <input 
            type="number" 
            id="stitch-gauge" 
            class="input-field" 
            placeholder="Stitches per 4&quot; (10cm)"
            min="0.1"
            step="0.1"
            data-testid="input-stitch-gauge"
          />
        </div>
        
        <div class="input-group">
          <input 
            type="number" 
            id="row-gauge" 
            class="input-field" 
            placeholder="Rows per 4&quot; (10cm)"
            min="0.1"
            step="0.1"
            data-testid="input-row-gauge"
          />
        </div>
      </div>
      
      <div class="button-row">
        <button class="calculate-btn" id="calculate-btn" data-testid="button-calculate">
          CALCULATE
        </button>
      </div>
      
      <p class="footnote">
        Estimate ignores shapingâ€”measure the widest and longest parts of your piece.
      </p>
    </div>
    
    <ActionBar />
    
    <div id="results" class="results-container" role="region" aria-live="polite">
      <h3 class="results-title">Your Corner-to-Corner Blanket</h3>
      
      <div class="result-grid">
        <div class="result-item">
          <div class="result-label">Width & Height</div>
          <p class="result-value">
            <span id="base-value">0</span> <span class="result-unit">inches</span>
          </p>
        </div>
        
        <div class="result-item">
          <div class="result-label">Diagonal</div>
          <p class="result-value">
            <span id="height-value">0</span> <span class="result-unit">inches</span>
          </p>
        </div>
        
        <div class="result-item">
          <div class="result-label">Total Rows</div>
          <p class="result-value">
            <span id="decrease-value">0</span> <span class="result-unit-rows">rows</span>
          </p>
        </div>
      </div>
      
      <div class="instructions-box">
        <h4 class="instructions-title">Knitting Instructions</h4>
        <p class="instructions-text" id="instructions-text">
          <!-- Will be populated by JavaScript -->
        </p>
      </div>
      
      <div class="diagram-container">
        <h4 class="diagram-title">Square Diagram</h4>
        <svg id="diagram-svg" viewBox="0 0 400 300" width="400" height="300" xmlns="http://www.w3.org/2000/svg" style="max-width: 100%; height: auto;">
          <!-- Will be populated by JavaScript -->
        </svg>
      </div>
      
      <!-- Print footer -->
      <div id="print-footer" class="print-footer" style="display: none;">
        Generated by knitbymachine.com - Corner-to-Corner Blanket Calculator
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const needlesInput = document.getElementById('needles');
  const stitchGaugeInput = document.getElementById('stitch-gauge');
  const rowGaugeInput = document.getElementById('row-gauge');
  const calculateBtn = document.getElementById('calculate-btn');
  const errorMessage = document.getElementById('error-message');
  const resultsContainer = document.getElementById('results');
  const baseValue = document.getElementById('base-value');
  const heightValue = document.getElementById('height-value');
  const decreaseValue = document.getElementById('decrease-value');
  const instructionsText = document.getElementById('instructions-text');
  const diagramSvg = document.getElementById('diagram-svg');
  
  // Action Bar buttons
  const actionBar = document.getElementById('action-bar');
  const startOverBtn = document.getElementById('start-over-btn');
  const printBtn = document.getElementById('print-btn');
  const downloadPdfBtn = document.getElementById('download-pdf');
  
  // Unit toggle
  const btnInches = document.getElementById('btn-inches');
  const btnCm = document.getElementById('btn-cm');
  let currentUnit = localStorage.getItem('c2c-unit') || 'inches';
  
  // Initialize unit toggle
  function updateUnitToggle() {
    if (currentUnit === 'inches') {
      btnInches.classList.add('active');
      btnCm.classList.remove('active');
    } else {
      btnCm.classList.add('active');
      btnInches.classList.remove('active');
    }
    updateLabels();
  }
  
  function updateLabels() {
    // Update gauge input placeholders
    if (currentUnit === 'inches') {
      stitchGaugeInput.placeholder = 'Stitches per 4" (10cm)';
      rowGaugeInput.placeholder = 'Rows per 4" (10cm)';
    } else {
      stitchGaugeInput.placeholder = 'Stitches per 10cm (4")';
      rowGaugeInput.placeholder = 'Rows per 10cm (4")';
    }
    
    // Update result units
    const resultUnits = document.querySelectorAll('.result-unit');
    resultUnits.forEach(unit => {
      unit.textContent = currentUnit === 'inches' ? 'inches' : 'cm';
    });
  }
  
  btnInches.addEventListener('click', function() {
    currentUnit = 'inches';
    localStorage.setItem('c2c-unit', currentUnit);
    updateUnitToggle();
  });
  
  btnCm.addEventListener('click', function() {
    currentUnit = 'cm';
    localStorage.setItem('c2c-unit', currentUnit);
    updateUnitToggle();
  });
  
  // Initialize on load
  updateUnitToggle();
  
  // Calculate function
  function calculate() {
    const maxNeedles = parseFloat(needlesInput.value);
    const stGauge = parseFloat(stitchGaugeInput.value);
    const rowGauge = parseFloat(rowGaugeInput.value);
    const isInches = currentUnit === 'inches';
    
    // Validate inputs
    if (!maxNeedles || !stGauge || !rowGauge || maxNeedles <= 0 || stGauge <= 0 || rowGauge <= 0) {
      errorMessage.classList.add('show');
      resultsContainer.classList.remove('show');
      return;
    }
    
    // Hide error message
    errorMessage.classList.remove('show');
    
    // Constants
    const startStitches = 3;
    const gaugeRef = isInches ? 4 : 10; // 4" or 10cm
    
    // STEP 1: Calculate dimensions for square
    // Width (diagonal) = max needles / stitch gauge
    const widthInUnits = maxNeedles / (stGauge / gaugeRef);
    
    // For a square corner-to-corner: height = width
    const heightInUnits = widthInUnits;
    
    // STEP 2: Calculate target rows for the ENTIRE square
    // Total rows = width * row gauge (since height = width for square)
    const targetRows = widthInUnits * (rowGauge / gaugeRef);
    
    // Each half (increase + decrease) gets half the rows
    const rowsPerPhase = targetRows / 2;
    
    // STEP 3: Apply Magic Formula to INCREASE phase (3 â†’ max)
    const stitchesToIncrease = maxNeedles - startStitches;
    const totalIncreases = stitchesToIncrease / 2; // Each increase row adds 2 stitches
    
    let increaseRowsPerChange = rowsPerPhase / totalIncreases;
    let increaseIntSpacing = Math.floor(increaseRowsPerChange);
    let increaseFraction = increaseRowsPerChange - increaseIntSpacing;
    let increaseWiderGaps = Math.round(increaseFraction * totalIncreases);
    let increaseNormalGaps = totalIncreases - increaseWiderGaps;
    
    // STEP 4: Apply Magic Formula to DECREASE phase (max â†’ 3)
    const stitchesToDecrease = maxNeedles - startStitches;
    const totalDecreases = stitchesToDecrease / 2; // Each decrease row removes 2 stitches
    
    let decreaseRowsPerChange = rowsPerPhase / totalDecreases;
    let decreaseIntSpacing = Math.floor(decreaseRowsPerChange);
    let decreaseFraction = decreaseRowsPerChange - decreaseIntSpacing;
    let decreaseWiderGaps = Math.round(decreaseFraction * totalDecreases);
    let decreaseNormalGaps = totalDecreases - decreaseWiderGaps;
    
    // Update results display
    baseValue.textContent = widthInUnits.toFixed(1);
    heightValue.textContent = heightInUnits.toFixed(1);
    decreaseValue.textContent = Math.round(targetRows);
    
    // Generate detailed instructions
    let instructions = `Cast on ${startStitches} stitches.\n\n`;
    
    // INCREASE phase instructions
    instructions += `INCREASE PHASE (${startStitches} â†’ ${maxNeedles} stitches):\n`;
    if (increaseWiderGaps === 0) {
      instructions += `Increase 1 stitch on each side every ${increaseIntSpacing} rows, ${totalIncreases} times.`;
    } else if (increaseNormalGaps === 0) {
      instructions += `Increase 1 stitch on each side every ${increaseIntSpacing + 1} rows, ${totalIncreases} times.`;
    } else {
      instructions += `Increase 1 stitch on each side every ${increaseIntSpacing} rows ${increaseNormalGaps} times, `;
      instructions += `then every ${increaseIntSpacing + 1} rows ${increaseWiderGaps} times.`;
    }
    instructions += `\n\n`;
    
    // DECREASE phase instructions
    instructions += `DECREASE PHASE (${maxNeedles} â†’ ${startStitches} stitches):\n`;
    if (decreaseWiderGaps === 0) {
      instructions += `Decrease 1 stitch on each side every ${decreaseIntSpacing} rows, ${totalDecreases} times.`;
    } else if (decreaseNormalGaps === 0) {
      instructions += `Decrease 1 stitch on each side every ${decreaseIntSpacing + 1} rows, ${totalDecreases} times.`;
    } else {
      instructions += `Decrease 1 stitch on each side every ${decreaseIntSpacing} rows ${decreaseNormalGaps} times, `;
      instructions += `then every ${decreaseIntSpacing + 1} rows ${decreaseWiderGaps} times.`;
    }
    instructions += `\n\nBind off remaining ${startStitches} stitches.`;
    
    instructionsText.textContent = instructions;
    
    // Generate diagram
    generateDiagram(widthInUnits, heightInUnits);
    
    // Show results
    resultsContainer.classList.add('show');
    
    // Show action bar with all buttons
    actionBar.style.display = 'flex';
    printBtn.style.display = 'inline-flex';
    downloadPdfBtn.style.display = 'inline-flex';
    
    // Smooth scroll to results
    setTimeout(() => {
      resultsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }, 100);
  }
  
  // Generate SVG diagram - diamond/square shape for corner-to-corner
  function generateDiagram(width, height) {
    const svgWidth = 400;
    const svgHeight = 300;
    const margin = 40;
    const unitLabel = currentUnit === 'inches' ? '"' : 'cm';
    
    // Since it's a square, width = height
    const squareSize = Math.max(width, height);
    
    // Calculate scale to fit the diamond (rotated square)
    const scale = Math.min((svgWidth - margin * 2) / squareSize, (svgHeight - margin * 2) / squareSize);
    const size = squareSize * scale;
    
    // Diamond coordinates (rotated square)
    const centerX = svgWidth / 2;
    const centerY = svgHeight / 2;
    const halfSize = size / 2;
    
    // Four corners of the diamond
    const top = { x: centerX, y: centerY - halfSize };
    const right = { x: centerX + halfSize, y: centerY };
    const bottom = { x: centerX, y: centerY + halfSize };
    const left = { x: centerX - halfSize, y: centerY };
    
    diagramSvg.innerHTML = `
      <!-- Diamond shape (square rotated 45Â°) -->
      <polygon points="${top.x},${top.y} ${right.x},${right.y} ${bottom.x},${bottom.y} ${left.x},${left.y}" 
               fill="none" stroke="#52682d" stroke-width="2"/>
      
      <!-- Width measurement (horizontal across) -->
      <line x1="${left.x - 15}" y1="${centerY}" x2="${right.x + 15}" y2="${centerY}" 
            stroke="black" stroke-width="1"/>
      <circle cx="${left.x - 15}" cy="${centerY}" r="3" fill="black"/>
      <circle cx="${right.x + 15}" cy="${centerY}" r="3" fill="black"/>
      <text x="${centerX}" y="${centerY + 25}" text-anchor="middle" font-size="12" fill="black">
        Width: ${squareSize.toFixed(1)}${unitLabel}
      </text>
      
      <!-- Height measurement (vertical) - rotated 90Â° for clarity -->
      <line x1="${centerX + halfSize + 30}" y1="${top.y}" x2="${centerX + halfSize + 30}" y2="${bottom.y}" 
            stroke="black" stroke-width="1"/>
      <circle cx="${centerX + halfSize + 30}" cy="${top.y}" r="3" fill="black"/>
      <circle cx="${centerX + halfSize + 30}" cy="${bottom.y}" r="3" fill="black"/>
      <text x="${centerX + halfSize + 50}" y="${centerY}" text-anchor="middle" font-size="12" fill="black"
            transform="rotate(-90, ${centerX + halfSize + 50}, ${centerY})">
        Height: ${squareSize.toFixed(1)}${unitLabel}
      </text>
      
      <!-- Diagonal measurement (from top-left to bottom-right) - rotated 90Â° -->
      <line x1="${left.x}" y1="${left.y}" x2="${top.x}" y2="${top.y}" stroke="none"/>
      <text x="${(left.x + top.x) / 2 - 30}" y="${(left.y + top.y) / 2}" 
            text-anchor="middle" font-size="11" fill="#52682d" font-weight="bold"
            transform="rotate(-45, ${(left.x + top.x) / 2 - 30}, ${(left.y + top.y) / 2})">
        Diagonal: ${(squareSize * 1.414).toFixed(1)}${unitLabel}
      </text>
      
      <!-- Corner labels -->
      <text x="${top.x}" y="${top.y - 10}" text-anchor="middle" font-size="11" fill="#52682d" font-weight="bold">
        Start (3 sts)
      </text>
      <text x="${right.x + 15}" y="${right.y - 5}" text-anchor="start" font-size="11" fill="#52682d" font-weight="bold">
        Max width
      </text>
      <text x="${bottom.x}" y="${bottom.y + 20}" text-anchor="middle" font-size="11" fill="#52682d" font-weight="bold">
        End (3 sts)
      </text>
    `;
  }
  
  // Reset function
  function reset() {
    needlesInput.value = '';
    stitchGaugeInput.value = '';
    rowGaugeInput.value = '';
    errorMessage.classList.remove('show');
    resultsContainer.classList.remove('show');
    
    // Hide action bar
    actionBar.style.display = 'none';
    printBtn.style.display = 'none';
    downloadPdfBtn.style.display = 'none';
    
    // Scroll back to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
  
  // Print function
  function handlePrint() {
    window.print();
  }
  
  // Download PDF function
  function handleDownloadPdf() {
    const element = resultsContainer;
    const opt = {
      margin: 0.5,
      filename: 'corner-to-corner-pattern.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2, useCORS: true, backgroundColor: '#ffffff' },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };
    
    html2pdf().set(opt).from(element).save();
  }
  
  // Event listeners
  calculateBtn.addEventListener('click', calculate);
  startOverBtn.addEventListener('click', reset);
  printBtn.addEventListener('click', handlePrint);
  downloadPdfBtn.addEventListener('click', handleDownloadPdf);
  
  // Allow Enter key to calculate
  [needlesInput, stitchGaugeInput, rowGaugeInput].forEach(input => {
    input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        calculate();
      }
    });
  });
});
</script>

</BaseLayout>

---
import BaseLayout from "../../layouts/BaseLayout.astro";
import ActionBar from "../../components/wizards/ActionBar.astro";
---

<BaseLayout 
  title="DIY Blanket Wizard | Knit by Machine" 
  description="Design your own blanket for any yarn, any machine, any gauge. Choose a standard size or set your own — includes a built-in yarn estimator.">

<style>
.wizard-page {
  padding-top: 120px;
  padding-bottom: 3rem;
  min-height: 100vh;
  background: var(--page-bg);
}

.page-header {
  text-align: center;
  max-width: 800px;
  margin: 0 auto 2rem;
  padding: 0 1rem;
}

.page-header h1 {
  color: var(--kbm-green);
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.75rem;
}

.page-header p {
  color: #6b7280;
  font-size: 1.05rem;
  line-height: 1.6;
}

.video-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: var(--kbm-green);
  color: white;
  text-decoration: none;
  font-weight: 600;
  border-radius: 8px;
  margin: 1.5rem 0;
  transition: all 0.2s;
  border: none;
  cursor: pointer;
  font-size: 1rem;
}

.video-button:hover {
  background: #6E8B3D;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(82, 104, 45, 0.3);
}

.wizard-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 0 1rem 120px 1rem;
}

.calculator-card {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.section-title {
  color: var(--kbm-green);
  font-size: 1.3rem;
  font-weight: 700;
  margin: 1.5rem 0 1rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid #eef0ea;
}

.input-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.input-group {
  display: flex;
  flex-direction: column;
}

.input-group label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.9rem;
}

.input-group input, .input-group select {
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 1rem;
  transition: all 0.2s;
}

.input-group input:focus, .input-group select:focus {
  outline: none;
  border-color: var(--kbm-green);
  box-shadow: 0 0 0 3px rgba(82, 104, 45, 0.1);
}

.input-group input.error {
  border-color: #dc3545;
}

.input-group input.warning {
  border-color: #ffc107;
}

.validation-message {
  margin-top: 0.25rem;
  font-size: 0.85rem;
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.validation-message.error {
  color: #dc3545;
}

.validation-message.warning {
  color: #ff8c00;
}

.units-toggle {
  display: flex;
  gap: 0.5rem;
  justify-content: center;
  margin-bottom: 2rem;
  padding: 4px;
  background: #f3f4f6;
  border-radius: 8px;
  width: fit-content;
  margin-left: auto;
  margin-right: auto;
}

.unit-btn {
  padding: 0.5rem 1.5rem;
  border: none;
  background: transparent;
  color: #6b7280;
  font-weight: 600;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 0.95rem;
}

.unit-btn.active {
  background: var(--kbm-green);
  color: white;
}

.info-box {
  background: rgba(82, 104, 45, 0.1);
  border-left: 4px solid var(--kbm-green);
  padding: 1rem;
  border-radius: 4px;
  margin-bottom: 1.5rem;
}

:global(.size-categories) {
  display: grid;
  gap: 2rem;
  margin-bottom: 1.5rem;
}

:global(.size-category h4) {
  color: var(--kbm-green);
  font-size: 0.9rem;
  font-weight: 700;
  margin-bottom: 1rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid #eef0ea;
}

:global(.size-options) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 1rem;
}

:global(.size-option) {
  padding: 1.25rem;
  min-height: 88px;
  border: 2px solid #e5e7eb;
  border-radius: 10px;
  cursor: pointer;
  text-align: center;
  transition: all 0.25s ease;
  background: white;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
}

:global(.size-option:hover) {
  border-color: var(--kbm-green);
  background: rgba(82, 104, 45, 0.05);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(82, 104, 45, 0.15);
}

:global(.size-option.selected) {
  border-color: var(--kbm-green);
  background: rgba(82, 104, 45, 0.12);
  box-shadow: 0 0 0 3px rgba(82, 104, 45, 0.2), 0 4px 12px rgba(82, 104, 45, 0.2);
  transform: translateY(-2px);
}

:global(.size-option-name) {
  font-size: 1rem;
  color: #1f2937;
  font-weight: 700;
  line-height: 1.3;
}

:global(.size-option.selected .size-option-name) {
  color: var(--kbm-green);
}

:global(.size-option-dims) {
  font-size: 0.875rem;
  color: #6b7280;
  font-weight: 500;
}

@media (max-width: 768px) {
  :global(.size-options) {
    grid-template-columns: 1fr;
  }
  
  :global(.size-option) {
    min-height: 72px;
  }
}

@media (min-width: 769px) and (max-width: 1024px) {
  :global(.size-options) {
    grid-template-columns: repeat(2, 1fr);
  }
}

.checkbox-group {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin: 1rem 0;
}

.checkbox-group input[type="checkbox"] {
  width: 18px;
  height: 18px;
  cursor: pointer;
}

.checkbox-group label {
  cursor: pointer;
  font-weight: 600;
  color: #374151;
}

.results-section {
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 2px solid #eef0ea;
}

.pattern-card {
  background: #f9fafb;
  padding: 1.5rem;
  border-radius: 8px;
  margin-bottom: 1.5rem;
}

.pattern-card h3 {
  color: var(--kbm-green);
  font-size: 1.2rem;
  margin-bottom: 1rem;
}

.highlight-box {
  background: rgba(82, 104, 45, 0.2);
  border-left: 4px solid var(--kbm-green);
  padding: 1rem;
  border-radius: 4px;
  margin-bottom: 1rem;
}

.materials-list, .instructions-list {
  margin-left: 1.5rem;
  line-height: 1.8;
}

.diagram-container {
  text-align: center;
  margin: 2rem 0;
}

.diagram-container svg {
  max-width: 500px;
  width: 100%;
  height: auto;
}

@media print {
  .no-print {
    display: none !important;
  }
  
  .wizard-page {
    padding-top: 0;
  }
  
  .page-header, .video-button {
    display: none;
  }
}
</style>

<div class="wizard-page">
  <div class="page-header no-print">
    <h1>DIY Blanket Wizard</h1>
    <p>
      Design the perfect blanket — any yarn, any size, any machine. Choose a standard size or set your own with a built-in yarn estimator.
    </p>
    <button class="video-button" onclick="alert('Video tutorial coming soon!')">
      Watch Video Tutorial
    </button>
  </div>

  <ActionBar />
  
  <div class="wizard-container">

    <div class="calculator-card">
      <!-- Units Toggle -->
      <div class="units-toggle">
        <button class="unit-btn active" id="btn-inches">Inches</button>
        <button class="unit-btn" id="btn-cm">Centimeters</button>
      </div>

      <div class="info-box">
        <p><strong>DIY Blanket:</strong> Select a standard size or create your own custom dimensions. Optional yarn calculator helps you estimate how much yarn you'll need based on your gauge swatch.</p>
      </div>

      <!-- Gauge Section -->
      <h3 class="section-title">Your Gauge</h3>
      <div class="input-grid">
        <div class="input-group">
          <label for="stitches-gauge">Stitch Gauge</label>
          <input 
            type="number" 
            id="stitches-gauge" 
            step="0.1" 
            placeholder="stitches per 4&quot;"
            data-testid="input-stitches"
          />
          <div class="validation-message" id="stitches-message"></div>
        </div>
        <div class="input-group">
          <label for="rows-gauge">Row Gauge</label>
          <input 
            type="number" 
            id="rows-gauge" 
            step="0.1" 
            placeholder="rows per 4&quot;"
            data-testid="input-rows"
          />
          <div class="validation-message" id="rows-message"></div>
        </div>
      </div>

      <!-- Size Selection -->
      <h3 class="section-title">Select Blanket Size</h3>
      
      <div class="checkbox-group">
        <input type="checkbox" id="use-custom" data-testid="checkbox-custom-size">
        <label for="use-custom">Use Custom Size</label>
      </div>

      <!-- Standard Sizes -->
      <div id="standard-sizes" class="size-categories">
        <!-- Will be populated by JavaScript -->
      </div>

      <!-- Custom Size Inputs -->
      <div id="custom-size" style="display: none;">
        <div class="input-grid">
          <div class="input-group">
            <label for="custom-length">Length</label>
            <input 
              type="number" 
              id="custom-length" 
              step="0.5" 
              placeholder="e.g., 60"
              data-testid="input-custom-length"
            />
          </div>
          <div class="input-group">
            <label for="custom-width">Width</label>
            <input 
              type="number" 
              id="custom-width" 
              step="0.5" 
              placeholder="e.g., 48"
              data-testid="input-custom-width"
            />
          </div>
        </div>
      </div>

      <!-- Yarn Calculator Section -->
      <h3 class="section-title">Yarn Calculator (Optional)</h3>
      
      <div class="checkbox-group">
        <input type="checkbox" id="calculate-yarn" data-testid="checkbox-yarn-calculator">
        <label for="calculate-yarn">Calculate Yarn Needed</label>
      </div>

      <div id="yarn-inputs" style="display: none;">
        <div class="info-box">
          <p><strong>How it works:</strong> Knit and weigh a gauge swatch. Enter its dimensions and weight below to calculate how much yarn you'll need for your blanket.</p>
        </div>
        <div class="input-grid">
          <div class="input-group">
            <label for="swatch-width">Swatch Width</label>
            <input 
              type="number" 
              id="swatch-width" 
              step="0.1" 
              placeholder="e.g., 4"
              data-testid="input-swatch-width"
            />
          </div>
          <div class="input-group">
            <label for="swatch-length">Swatch Length</label>
            <input 
              type="number" 
              id="swatch-length" 
              step="0.1" 
              placeholder="e.g., 4"
              data-testid="input-swatch-length"
            />
          </div>
          <div class="input-group">
            <label for="swatch-weight">Swatch Weight (grams)</label>
            <input 
              type="number" 
              id="swatch-weight" 
              step="0.1" 
              placeholder="e.g., 25"
              data-testid="input-swatch-weight"
            />
          </div>
        </div>
      </div>

      <!-- Results Section -->
      <div id="results" style="display: none;">
        <div class="results-section">
          <div class="pattern-card">
            <h3>Blanket Knitting Pattern</h3>
            <div id="pattern-content">
              <!-- Will be populated by JavaScript -->
            </div>
          </div>

          <div class="diagram-container">
            <h3 style="color: var(--kbm-green); margin-bottom: 1rem;">Diagram</h3>
            <div id="diagram-content">
              <!-- Will be populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('DIY Blanket Wizard initializing...');
  
  // Blanket size data
  const blanketSizes = {
    "adult-throw": { name: "Adult Throw", length: 78, width: 48, category: "Throw" },
    "bassinet": { name: "Bassinet", length: 36, width: 16, category: "Baby" },
    "child": { name: "Child", length: 48, width: 42, category: "Child" },
    "cradle": { name: "Cradle", length: 36, width: 20, category: "Baby" },
    "crib": { name: "Crib", length: 54, width: 30, category: "Baby" },
    "large-preemie": { name: "Large Preemie", length: 36, width: 36, category: "Baby" },
    "small-preemie": { name: "Small Preemie", length: 24, width: 24, category: "Baby" },
    "standard-throw": { name: "Standard Throw", length: 60, width: 48, category: "Throw" },
    "toddler": { name: "Toddler or Lapghan", length: 48, width: 36, category: "Child" }
  };

  // State
  let units = 'inches';
  let stitchesGauge = '';
  let rowsGauge = '';
  let hasGaugeError = false;
  let selectedSize = '';
  let useCustomSize = false;
  let customLength = '';
  let customWidth = '';
  let calculateYarn = false;
  let swatchWidth = '';
  let swatchLength = '';
  let swatchWeight = '';

  // DOM elements
  const btnInches = document.getElementById('btn-inches');
  const btnCm = document.getElementById('btn-cm');
  const inputStitches = document.getElementById('stitches-gauge');
  const inputRows = document.getElementById('rows-gauge');
  const stitchesMsg = document.getElementById('stitches-message');
  const rowsMsg = document.getElementById('rows-message');
  const useCustomCheckbox = document.getElementById('use-custom');
  const standardSizesDiv = document.getElementById('standard-sizes');
  const customSizeDiv = document.getElementById('custom-size');
  const inputCustomLength = document.getElementById('custom-length');
  const inputCustomWidth = document.getElementById('custom-width');
  const calculateYarnCheckbox = document.getElementById('calculate-yarn');
  const yarnInputsDiv = document.getElementById('yarn-inputs');
  const inputSwatchWidth = document.getElementById('swatch-width');
  const inputSwatchLength = document.getElementById('swatch-length');
  const inputSwatchWeight = document.getElementById('swatch-weight');
  const resultsSection = document.getElementById('results');
  const actionBar = document.getElementById('action-bar');
  const startOverBtn = document.getElementById('start-over-btn');
  const printBtn = document.getElementById('print-btn');
  const downloadBtn = document.getElementById('download-btn');
  
  console.log('DOM elements loaded, standardSizesDiv:', standardSizesDiv);

  // Populate size categories
  function populateSizes() {
    console.log('populateSizes() called');
    const categories = {};
    Object.entries(blanketSizes).forEach(([key, data]) => {
      if (!categories[data.category]) {
        categories[data.category] = [];
      }
      categories[data.category].push({ key, ...data });
    });

    console.log('Categories created:', categories);
    standardSizesDiv.innerHTML = '';
    Object.entries(categories).forEach(([category, sizes]) => {
      const categoryDiv = document.createElement('div');
      categoryDiv.className = 'size-category';
      
      const title = document.createElement('h4');
      title.textContent = category;
      categoryDiv.appendChild(title);

      const optionsDiv = document.createElement('div');
      optionsDiv.className = 'size-options';
      
      sizes.forEach(size => {
        const option = document.createElement('div');
        option.className = 'size-option';
        option.dataset.sizeKey = size.key;
        option.innerHTML = `
          <div class="size-option-name">${size.name}</div>
          <div class="size-option-dims">${size.length}" × ${size.width}"</div>
        `;
        option.onclick = () => selectSize(size.key);
        optionsDiv.appendChild(option);
      });

      categoryDiv.appendChild(optionsDiv);
      standardSizesDiv.appendChild(categoryDiv);
    });
    console.log('Size cards created and appended. Total categories:', Object.keys(categories).length);
    console.log('standardSizesDiv innerHTML length:', standardSizesDiv.innerHTML.length);
  }

  function selectSize(key) {
    selectedSize = key;
    document.querySelectorAll('.size-option').forEach(opt => {
      opt.classList.toggle('selected', opt.dataset.sizeKey === key);
    });
    calculate();
  }

  // Validation
  function validateGauge(value, type) {
    if (!value) return { valid: true, message: '', class: '' };
    
    const num = parseFloat(value);
    if (isNaN(num)) {
      return { valid: false, message: 'Please enter a valid number', class: 'error' };
    }
    if (num < 2) {
      return { valid: false, message: 'Value must be at least 2', class: 'error' };
    }
    if (num > 80) {
      return { valid: false, message: 'Value must be 80 or less', class: 'error' };
    }
    
    if (type === 'stitches' && (num < 10 || num > 50)) {
      return { valid: true, message: 'That seems unusual — double-check your entry', class: 'warning' };
    }
    if (type === 'rows' && (num < 10 || num > 60)) {
      return { valid: true, message: 'That seems unusual — double-check your entry', class: 'warning' };
    }
    
    return { valid: true, message: '', class: '' };
  }

  function updateValidation(input, msgEl, type) {
    const validation = validateGauge(input.value, type);
    input.className = validation.class;
    if (validation.message) {
      const symbol = validation.class === 'error' ? '⚠' : '⚠';
      msgEl.className = `validation-message ${validation.class}`;
      msgEl.innerHTML = `${symbol} ${validation.message}`;
    } else {
      msgEl.className = 'validation-message';
      msgEl.innerHTML = '';
    }
    return validation.valid;
  }
  
  // Check if BOTH gauge inputs are valid
  function checkGaugeErrors() {
    const stitchesValidation = validateGauge(stitchesGauge, 'stitches');
    const rowsValidation = validateGauge(rowsGauge, 'rows');
    return !stitchesValidation.valid || !rowsValidation.valid;
  }

  // Unit conversion
  function convertDimensions(dimensions) {
    if (units === 'cm') {
      return {
        length: Math.round(dimensions.length * 2.54 * 10) / 10,
        width: Math.round(dimensions.width * 2.54 * 10) / 10
      };
    }
    return dimensions;
  }

  // Get current size selection
  function getCurrentSize() {
    if (useCustomSize && customLength && customWidth) {
      return {
        size: "Custom",
        dimensions: {
          length: parseFloat(customLength),
          width: parseFloat(customWidth)
        },
        category: "Custom"
      };
    }
    
    if (selectedSize && blanketSizes[selectedSize]) {
      const sizeData = blanketSizes[selectedSize];
      return {
        size: sizeData.name,
        dimensions: convertDimensions({ length: sizeData.length, width: sizeData.width }),
        category: sizeData.category
      };
    }
    
    return null;
  }

  // Calculate yarn needed
  function calculateYarnNeeded(sizeSelection, widthSts, lengthRows) {
    if (!calculateYarn || !swatchWidth || !swatchLength || !swatchWeight) {
      return { grams: 0, balls: 0, method: 'none' };
    }

    const swatchWidthNum = parseFloat(swatchWidth);
    const swatchLengthNum = parseFloat(swatchLength);
    const swatchWeightNum = parseFloat(swatchWeight);

    if (swatchWidthNum > 0 && swatchLengthNum > 0 && swatchWeightNum > 0) {
      const swatchArea = swatchWidthNum * swatchLengthNum;
      const blanketArea = sizeSelection.dimensions.width * sizeSelection.dimensions.length;
      const gramsNeeded = Math.round((blanketArea / swatchArea) * swatchWeightNum);
      const ballsNeeded = Math.ceil(gramsNeeded / 100);

      return { grams: gramsNeeded, balls: ballsNeeded, method: 'swatch' };
    }

    return { grams: 0, balls: 0, method: 'none' };
  }

  // Generate SVG diagram
  function generateDiagram(sizeSelection, widthSts, lengthRows, yarnData) {
    const blanketWidth = sizeSelection.dimensions.width;
    const blanketLength = sizeSelection.dimensions.length;
    const aspectRatio = blanketWidth / blanketLength;

    const svgWidth = 400;
    const svgHeight = 300;
    const maxRectWidth = 250;
    const maxRectHeight = 200;

    let rectWidth, rectHeight;
    if (aspectRatio > 1) {
      rectWidth = maxRectWidth;
      rectHeight = maxRectWidth / aspectRatio;
    } else {
      rectHeight = maxRectHeight;
      rectWidth = maxRectHeight * aspectRatio;
    }

    const rectX = (svgWidth - rectWidth) / 2;
    const rectY = (svgHeight - rectHeight) / 2;

    const unitLabel = units === 'inches' ? '"' : 'cm';

    const yarnText = yarnData.method !== 'none'
      ? `<text x="${rectX + rectWidth/2}" y="${rectY + rectHeight/2 + 15}" text-anchor="middle" font-size="12" fill="#666">${yarnData.grams}g</text>`
      : '';

    return `
      <svg viewBox="0 0 ${svgWidth} ${svgHeight}" style="width: 100%; max-width: 500px; height: auto;">
        <rect x="${rectX}" y="${rectY}" width="${rectWidth}" height="${rectHeight}"
              fill="none" stroke="black" stroke-width="2"/>

        <line x1="${rectX}" y1="${rectY + rectHeight + 25}" x2="${rectX + rectWidth}" y2="${rectY + rectHeight + 25}"
              stroke="black" stroke-width="1"/>
        <circle cx="${rectX}" cy="${rectY + rectHeight + 25}" r="3" fill="black"/>
        <circle cx="${rectX + rectWidth}" cy="${rectY + rectHeight + 25}" r="3" fill="black"/>
        <text x="${rectX + rectWidth/2}" y="${rectY + rectHeight + 45}" text-anchor="middle" font-size="12" fill="black">
          ${widthSts} stitches (${blanketWidth}${unitLabel})
        </text>

        <line x1="${rectX - 25}" y1="${rectY}" x2="${rectX - 25}" y2="${rectY + rectHeight}"
              stroke="black" stroke-width="1"/>
        <circle cx="${rectX - 25}" cy="${rectY}" r="3" fill="black"/>
        <circle cx="${rectX - 25}" cy="${rectY + rectHeight}" r="3" fill="black"/>
        <text x="${rectX - 35}" y="${rectY + rectHeight/2}" text-anchor="middle" font-size="12" fill="black"
              transform="rotate(-90, ${rectX - 35}, ${rectY + rectHeight/2})">
          ${lengthRows} rows (${blanketLength}${unitLabel})
        </text>

        <text x="${rectX + rectWidth/2}" y="${rectY + rectHeight/2 - 5}" text-anchor="middle" font-size="14" fill="#52682d" font-weight="bold">
          ${sizeSelection.size} Blanket
        </text>
        ${yarnText}
      </svg>
    `;
  }

  // Generate pattern instructions
  function generateInstructions(sizeSelection, widthSts, lengthRows, yarnData) {
    const unitLabel = units === 'inches' ? '"' : 'cm';
    const unitSize = units === 'inches' ? '4"' : '10cm';

    const yarnLine = yarnData.method !== 'none'
      ? `<li>Yarn: ${yarnData.grams}g (based on your swatch)</li>`
      : '';

    return `
      <div class="highlight-box">
        <strong style="color: #52682d;">${sizeSelection.size} Blanket</strong><br>
        <small style="color: #666;">Finished size: ${sizeSelection.dimensions.width}${unitLabel} × ${sizeSelection.dimensions.length}${unitLabel}</small>
      </div>

      <div style="margin-bottom: 20px;">
        <strong>Materials Needed:</strong>
        <ul class="materials-list">
          <li>Machine: Any knitting machine</li>
          ${yarnLine}
          <li>Gauge: ${stitchesGauge} stitches and ${rowsGauge} rows = ${unitSize}</li>
        </ul>
      </div>

      <div style="margin-bottom: 20px;">
        <strong>Pattern Instructions:</strong>
        <ol class="instructions-list">
          <li>Cast on ${widthSts} stitches</li>
          <li>Knit in pattern for ${lengthRows} rows</li>
          <li>Bind off all stitches</li>
        </ol>
      </div>

      <div style="margin-bottom: 20px;">
        <strong>Finishing:</strong>
        <ul class="materials-list">
          <li>Weave in all ends</li>
          <li>Block to finished measurements</li>
          <li>Add fringe or edging if desired</li>
        </ul>
      </div>

      <div class="highlight-box">
        <strong style="color: #52682d;">Pattern Summary:</strong><br>
        <small style="color: #666;">
          Cast on ${widthSts} stitches, knit ${lengthRows} rows, bind off.
          Finished size: ${sizeSelection.dimensions.width}${unitLabel} × ${sizeSelection.dimensions.length}${unitLabel}${yarnData.method !== 'none' ? `<br>Yarn needed: ${yarnData.grams}g` : ''}
        </small>
      </div>
    `;
  }

  // Main calculate function
  function calculate() {
    const divisor = units === 'inches' ? 4 : 10;
    const stitchesPerUnit = parseFloat(stitchesGauge) / divisor;
    const rowsPerUnit = parseFloat(rowsGauge) / divisor;

    const sizeSelection = getCurrentSize();

    // Show action bar if user has data
    if (stitchesGauge || rowsGauge) {
      actionBar.style.display = 'flex';
    }

    // Check if BOTH gauges are valid
    if (!stitchesPerUnit || !rowsPerUnit || !sizeSelection || checkGaugeErrors()) {
      resultsSection.style.display = 'none';
      printBtn.style.display = 'none';
      downloadBtn.style.display = 'none';
      return;
    }

    const widthSts = Math.round(sizeSelection.dimensions.width * stitchesPerUnit);
    const lengthRows = Math.round(sizeSelection.dimensions.length * rowsPerUnit);

    if (widthSts <= 0 || lengthRows <= 0) {
      resultsSection.style.display = 'none';
      printBtn.style.display = 'none';
      downloadBtn.style.display = 'none';
      return;
    }

    const yarnData = calculateYarnNeeded(sizeSelection, widthSts, lengthRows);

    // Display results
    document.getElementById('pattern-content').innerHTML = generateInstructions(sizeSelection, widthSts, lengthRows, yarnData);
    document.getElementById('diagram-content').innerHTML = generateDiagram(sizeSelection, widthSts, lengthRows, yarnData);

    resultsSection.style.display = 'block';
    printBtn.style.display = 'inline-flex';
    downloadBtn.style.display = 'inline-flex';
  }

  // Event handlers
  btnInches.addEventListener('click', () => {
    units = 'inches';
    btnInches.classList.add('active');
    btnCm.classList.remove('active');
    inputStitches.placeholder = 'stitches per 4"';
    inputRows.placeholder = 'rows per 4"';
    calculate();
  });

  btnCm.addEventListener('click', () => {
    units = 'cm';
    btnCm.classList.add('active');
    btnInches.classList.remove('active');
    inputStitches.placeholder = 'stitches per 10cm';
    inputRows.placeholder = 'rows per 10cm';
    calculate();
  });

  inputStitches.addEventListener('input', (e) => {
    stitchesGauge = e.target.value;
    updateValidation(inputStitches, stitchesMsg, 'stitches');
    calculate();
  });

  inputRows.addEventListener('input', (e) => {
    rowsGauge = e.target.value;
    updateValidation(inputRows, rowsMsg, 'rows');
    calculate();
  });

  useCustomCheckbox.addEventListener('change', (e) => {
    useCustomSize = e.target.checked;
    standardSizesDiv.style.display = useCustomSize ? 'none' : 'grid';
    customSizeDiv.style.display = useCustomSize ? 'block' : 'none';
    if (useCustomSize) {
      selectedSize = '';
      document.querySelectorAll('.size-option').forEach(opt => opt.classList.remove('selected'));
    }
    calculate();
  });

  inputCustomLength.addEventListener('input', (e) => {
    customLength = e.target.value;
    calculate();
  });

  inputCustomWidth.addEventListener('input', (e) => {
    customWidth = e.target.value;
    calculate();
  });

  calculateYarnCheckbox.addEventListener('change', (e) => {
    calculateYarn = e.target.checked;
    yarnInputsDiv.style.display = calculateYarn ? 'block' : 'none';
    calculate();
  });

  inputSwatchWidth.addEventListener('input', (e) => {
    swatchWidth = e.target.value;
    calculate();
  });

  inputSwatchLength.addEventListener('input', (e) => {
    swatchLength = e.target.value;
    calculate();
  });

  inputSwatchWeight.addEventListener('input', (e) => {
    swatchWeight = e.target.value;
    calculate();
  });

  startOverBtn.addEventListener('click', () => {
    units = 'inches';
    stitchesGauge = rowsGauge = '';
    selectedSize = '';
    useCustomSize = false;
    customLength = customWidth = '';
    calculateYarn = false;
    swatchWidth = swatchLength = swatchWeight = '';
    
    inputStitches.value = '';
    inputRows.value = '';
    inputCustomLength.value = '';
    inputCustomWidth.value = '';
    inputSwatchWidth.value = '';
    inputSwatchLength.value = '';
    inputSwatchWeight.value = '';
    useCustomCheckbox.checked = false;
    calculateYarnCheckbox.checked = false;
    
    btnInches.classList.add('active');
    btnCm.classList.remove('active');
    standardSizesDiv.style.display = 'grid';
    customSizeDiv.style.display = 'none';
    yarnInputsDiv.style.display = 'none';
    
    document.querySelectorAll('.size-option').forEach(opt => opt.classList.remove('selected'));
    
    actionBar.style.display = 'none';
    resultsSection.style.display = 'none';
  });

  printBtn.addEventListener('click', () => {
    window.print();
  });

  downloadBtn.addEventListener('click', async () => {
    const sizeSelection = getCurrentSize();
    if (!sizeSelection) return;

    const content = `
      <div style="font-family: Arial, sans-serif; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #52682d;">
          <h1 style="color: #52682d; margin: 0; font-size: 28px;">Blanket Pattern Wizard</h1>
          <p style="color: #666; margin: 5px 0 0 0; font-size: 16px;">Custom ${sizeSelection.size} Blanket Pattern</p>
        </div>
        <div style="margin-bottom: 30px;">${document.getElementById('pattern-content').innerHTML}</div>
        <div style="text-align: center;">
          <h3 style="color: #52682d;">Diagram</h3>
          ${document.getElementById('diagram-content').innerHTML}
        </div>
      </div>
    `;

    const opt = {
      margin: 1,
      filename: `${sizeSelection.size.replace(/\s+/g, '_')}_Blanket_Pattern.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };

    await html2pdf().set(opt).from(content).save();
  });

  // Initialize
  console.log('Initializing wizard, calling populateSizes()...');
  populateSizes();
  console.log('Wizard initialized!');
});
</script>

</BaseLayout>
